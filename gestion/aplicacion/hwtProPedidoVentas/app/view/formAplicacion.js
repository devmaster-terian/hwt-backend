/*
 * File: app/view/formAplicacion.js
 *
 * This file was generated by Sencha Architect version 4.1.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('hwtProPedidoVentas.view.formAplicacion', {
    extend: 'Ext.form.Panel',
    alias: 'widget.formAplicacion',

    requires: [
        'hwtProPedidoVentas.view.formAplicacionViewModel',
        'Ext.button.Button',
        'Ext.toolbar.Separator',
        'Ext.toolbar.Fill',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.toolbar.Paging',
        'Ext.form.field.ComboBox',
        'Ext.grid.column.Column'
    ],

    viewModel: {
        type: 'formaplicacion'
    },
    id: 'formAplicacion',
    itemId: 'formAplicacion',
    bodyCls: 'formBackground',
    bodyPadding: 10,
    defaultListenerScope: true,

    dockedItems: [
        {
            xtype: 'toolbar',
            cls: 'toolbarBackground',
            dock: 'top',
            id: 'toolbarPrincipal',
            itemId: 'toolbarPrincipal',
            items: [
                {
                    xtype: 'button',
                    id: 'btnVisualizar',
                    itemId: 'btnVisualizar',
                    width: 130,
                    iconCls: 'fa fa-eye icon16 iconColorDarkBlue',
                    text: 'Visualizar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickVisualizar'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnBuscar',
                    itemId: 'btnBuscar',
                    width: 130,
                    iconCls: 'fa fa-search icon16 iconColorDarkBlue',
                    text: 'Buscar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickBuscar'
                    }
                },
                {
                    xtype: 'tbseparator',
                    width: 50
                },
                {
                    xtype: 'button',
                    id: 'btnCrear',
                    itemId: 'btnCrear',
                    width: 130,
                    iconCls: 'fa fa-plus-square icon16 iconColorGreen',
                    text: 'Crear',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickCrear'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnActualizar',
                    itemId: 'btnActualizar',
                    width: 130,
                    iconCls: 'fa fa-pencil-square icon16 iconColorGreen',
                    text: 'Actualizar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickActualizar'
                    }
                },
                {
                    xtype: 'tbseparator',
                    width: 50
                },
                {
                    xtype: 'button',
                    hidden: true,
                    id: 'btnReporte',
                    itemId: 'btnReporte',
                    width: 130,
                    iconCls: 'fa fa-th  icon16 iconColorDarkBlue',
                    text: 'Reporte',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickReporte'
                    }
                },
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    id: 'btnSalir',
                    itemId: 'btnSalir',
                    width: 130,
                    iconCls: 'fa fa-external-link-square  icon16 iconColorRed',
                    text: 'Salir',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickSalir'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'gridpanel',
            reference: 'gridPedidoVenta',
            id: 'gridPedidoVenta',
            itemId: 'gridPedidoVenta',
            title: 'Pedidos de Venta',
            store: 'storePedidoVenta',
            dockedItems: [
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    width: 360,
                    displayInfo: true,
                    store: 'storePedidoVenta',
                    items: [
                        {
                            xtype: 'tbseparator',
                            width: 30
                        },
                        {
                            xtype: 'combobox',
                            id: 'cbxFiltroSituacionPedido',
                            itemId: 'cbxFiltroSituacionPedido',
                            width: 250,
                            fieldLabel: 'Situación',
                            labelWidth: 50,
                            editable: false,
                            displayField: 'descripcion',
                            queryMode: 'local',
                            store: 'storeFiltroSituacionPedido',
                            valueField: 'codigo',
                            listeners: {
                                change: 'onCbxFiltroSituacionPedidoChange'
                            }
                        },
                        {
                            xtype: 'button',
                            cls: 'botonZoomToolbar',
                            id: 'btnLimpiaBusqueda',
                            itemId: 'btnLimpiaBusqueda',
                            iconCls: 'fa fa-retweet icon16 iconColorDarkBlue',
                            text: 'Limpiar Busqueda',
                            listeners: {
                                click: 'onBtnLimpiaBusquedaClick'
                            }
                        }
                    ]
                }
            ],
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 70,
                    dataIndex: 'num_pedido',
                    locked: true,
                    text: 'Numero</br>Pedido'
                },
                {
                    xtype: 'gridcolumn',
                    width: 90,
                    dataIndex: 'fecha_pedido',
                    locked: true,
                    text: 'Fecha</br>Pedido'
                },
                {
                    xtype: 'gridcolumn',
                    width: 110,
                    dataIndex: 'situacion_pedido_descripcion',
                    locked: true,
                    text: 'Situación</br>Pedido'
                },
                {
                    xtype: 'gridcolumn',
                    width: 60,
                    dataIndex: 'codigo_cliente',
                    text: 'Codigo</br>Cliente'
                },
                {
                    xtype: 'gridcolumn',
                    width: 200,
                    dataIndex: 'cliente_nombre',
                    text: 'Nombre</br>Cliente'
                },
                {
                    xtype: 'gridcolumn',
                    width: 70,
                    align: 'right',
                    dataIndex: 'cantidad_unidades',
                    text: 'Cantidad</br>Unidades'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var valorRetorno = Ext.util.Format.number(value, '0,000.00');
                        return valorRetorno;
                    },
                    align: 'right',
                    dataIndex: 'valor_total',
                    text: 'Valor</br>Total'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var valorRetorno = Ext.util.Format.number(value, '0,000.00');
                        return valorRetorno;
                    },
                    align: 'right',
                    dataIndex: 'valor_con_cargo_cliente',
                    text: 'Adicional</br>Cargo Cliente'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var valorRetorno = Ext.util.Format.number(value, '0,000.00');
                        return valorRetorno;
                    },
                    align: 'right',
                    dataIndex: 'valor_sin_cargo_cliente',
                    text: 'Adicional</br>Sin Cargo Cliente'
                },
                {
                    xtype: 'gridcolumn',
                    width: 160,
                    dataIndex: 'gerente_regional_nombre',
                    text: 'Gerente Regional'
                },
                {
                    xtype: 'gridcolumn',
                    width: 160,
                    dataIndex: 'vendedor_nombre',
                    text: 'Vendedor'
                },
                {
                    xtype: 'gridcolumn',
                    width: 180,
                    dataIndex: 'concesionario_descripcion',
                    text: 'Consecionario'
                },
                {
                    xtype: 'gridcolumn',
                    width: 180,
                    dataIndex: 'consecionario_sucursal',
                    text: 'Sucursal'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'tipo_entrega',
                    text: 'Tipo</br>Entrega'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'integracion_clave_erp',
                    text: 'Integracion Clave Erp'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'integracion_fecha',
                    text: 'Integracion Fecha'
                }
            ],
            listeners: {
                itemclick: 'onGridPedidoVentaItemClick',
                itemdblclick: 'onGridPedidoVentaItemDblClick'
            }
        }
    ],

    onButtonClickVisualizar: function(button, e, eOpts) {

    },

    onButtonClickBuscar: function(button, e, eOpts) {
        elf.openWindow('winBuscaPedido');
        Ext.getCmp('formBuscaPedido').preparaInterfaz();
    },

    onButtonClickCrear: function(button, e, eOpts) {
        elf.openWindow('winPedidoVenta');

        Ext.getCmp('formPedidoVenta').operacionPedidoVenta = 'Crear';
        Ext.getCmp('formPedidoVenta').preparaInterfaz();
    },

    onButtonClickActualizar: function(button, e, eOpts) {
        Ext.getCmp('formAplicacion').presentaPedidoVenta();
    },

    onButtonClickReporte: function(button, e, eOpts) {

    },

    onButtonClickSalir: function(button, e, eOpts) {
        elf.stopApp('hwtProPedidoVentas');
    },

    onCbxFiltroSituacionPedidoChange: function(field, newValue, oldValue, eOpts) {
        elf.refreshGrid('gridPedidoVenta');
    },

    onBtnLimpiaBusquedaClick: function(button, e, eOpts) {
        elf.refreshGrid('gridPedidoVenta');
    },

    onGridPedidoVentaItemClick: function(dataview, record, item, index, e, eOpts) {
        Ext.getCmp('gridPedidoVenta').recordActivo = record.data;
    },

    onGridPedidoVentaItemDblClick: function(dataview, record, item, index, e, eOpts) {
        Ext.getCmp('formAplicacion').presentaPedidoVenta();
    },

    extraeOpcionesPedido: function() {
        var apiController = 'apiPedidoVenta';
        var apiMethod     = 'datosOpciones';
        var objJsonData = new Object();
        objJsonData.tipo    = 'Opciones de Unidad';

        var objJsonRequest = new Object();
        objJsonRequest.apiController = apiController;
        objJsonRequest.apiMethod     = apiMethod;
        objJsonRequest.apiData       = JSON.stringify(objJsonData);

        var functionSuccess = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);

            var arrayCombos = new Array();
            var objConfig   = new Object();

            objConfig.idComboBox   = 'cbxFiltroSituacionPedido';
            objConfig.idDataBridge = 'datosOpciones';
            objConfig.id           = 'opcionesFiltroSituacionPedido';
            objConfig.fieldValue   = 'codigo';
            objConfig.fieldDisplay = 'descripcion';
            objConfig.filterValue  = undefined;

            console.warn('¡Asignando el Combo de Situacion del Pedido');

            arrayCombos.push(objConfig);
            arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaCombosConfig);
        };

        var functionFailure = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);
        };

        elf.doDataBridge(objJsonRequest,
                         functionSuccess,
                         null,
                         functionFailure,
                         null);

    },

    extraeListaProveedores: function() {
        var apiController = 'apiProveedor';
        var apiMethod     = 'listaProveedor';
        var objJsonData = new Object();
        objJsonData.tipo    = 'Opciones de Proveedor';

        var objJsonRequest = new Object();
        objJsonRequest.apiController = apiController;
        objJsonRequest.apiMethod     = apiMethod;
        objJsonRequest.apiData       = JSON.stringify(objJsonData);

        var functionSuccess = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);
        };

        var functionFailure = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);
        };

        elf.doDataBridge(objJsonRequest,
                         functionSuccess,
                         null,
                         functionFailure,
                         null);
    },

    cargaCombos: function(element, index, array) {
        var jsonData = elf.getInfoDataBridge('datosOpciones');
        var idCombo    = 'cbx' + element;
        var listaCombo = 'opciones' + element;

        if(Ext.getCmp(idCombo) !== undefined){
            elf.setComboBox(idCombo,
                            jsonData,
                            listaCombo,
                            'descripcion',
                            'descripcion');
        }
        else{
            console.warn('cargaCombos: - No se encontro el ComboBox: ' + idCombo);
        }
    },

    cargaCombosConfig: function(element, index, array) {
        var objConfig = element;


        if(objConfig.idComboBox === undefined){
            var idCombo    = 'cbx' + objConfig.id;
        }
        else{
            var idCombo    = objConfig.idComboBox;
        }

        if(objConfig.idDataBridge === undefined){
            var jsonData = elf.getInfoDataBridge('datosOpciones');
            var listaCombo = 'opciones' + objConfig.id;
        }
        else{
            var jsonData = elf.getInfoDataBridge(objConfig.idDataBridge);
            var listaCombo = objConfig.id;
        }


        if(Ext.getCmp(idCombo) !== undefined){
            elf.setComboBox(idCombo,
                            jsonData,
                            listaCombo,
                            objConfig.fieldValue,
                            objConfig.fieldDisplay,
                            objConfig.filterDefault,
                            objConfig.filterField,
                            objConfig.filterValue);
        }
        else{
            console.warn('cargaCombos: - No se encontro el ComboBox: ' + idCombo);
        }
    },

    cargaCombosUsuario: function(element, index, array) {
        var jsonData = elf.getInfoDataBridge('datosOpciones');
        var idCombo    = 'cbx' + element;
        var listaCombo = 'opciones' + element;

        if(Ext.getCmp(idCombo) !== undefined){
            elf.setComboBox(idCombo,
                            jsonData,
                            listaCombo,
                            'usuario',
                            'nombre');
        }
        else{
            console.warn('cargaCombos: - No se encontro el ComboBox: ' + idCombo);
        }
    },

    presentaPedidoVenta: function() {
        var recordPedidoVenta = Ext.getCmp('gridPedidoVenta').recordActivo;
        if(recordPedidoVenta === undefined){
            msgTipo      = 'error';
            msgTitulo    = 'PedidoVenta de Unidades (Registro)';
            msgContenido = 'Debe seleccionar un registro válido para realizar ésta operación';
            elf.message(msgTipo,msgTitulo,msgContenido);
            return;
        }

        elf.openWindow('winPedidoVenta');
        Ext.getCmp('formPedidoVenta').presentarPedidoVenta();
    }

});