/*
 * File: app/view/winPedidoVenta.js
 *
 * This file was generated by Sencha Architect version 4.1.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('hwtProPedidoVentas.view.winPedidoVenta', {
    extend: 'Ext.window.Window',
    alias: 'widget.winPedidoVenta',

    requires: [
        'hwtProPedidoVentas.view.winPedidoVentaViewModel',
        'Ext.toolbar.Fill',
        'Ext.form.Panel',
        'Ext.tab.Panel',
        'Ext.tab.Tab',
        'Ext.form.FieldSet',
        'Ext.form.field.Date',
        'Ext.resizer.Splitter',
        'Ext.form.field.ComboBox',
        'Ext.form.field.TextArea',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.toolbar.Paging',
        'Ext.grid.column.Column'
    ],

    viewModel: {
        type: 'winpedidoventa'
    },
    modal: true,
    id: 'winPedidoVenta',
    itemId: 'winPedidoVenta',
    width: 1000,
    closable: false,
    title: 'Pedido de Venta',
    defaultListenerScope: true,

    dockedItems: [
        {
            xtype: 'toolbar',
            cls: 'toolbarBackground',
            dock: 'bottom',
            id: 'toolbarPedidoVenta',
            itemId: 'toolbarPedidoVenta',
            items: [
                {
                    xtype: 'button',
                    id: 'btnGuardarPedidoVenta',
                    itemId: 'btnGuardarPedidoVenta',
                    width: 120,
                    iconCls: 'fa fa-archive icon16 iconColorGreen',
                    text: 'Guardar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onBtnGuardarPedidoVentaClick'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnConfirmarPedidoVenta',
                    itemId: 'btnConfirmarPedidoVenta',
                    width: 120,
                    iconCls: 'fa fa-check-square icon16 iconColorGreen',
                    text: 'Confirmar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onBtnConfirmarPedidoVentaClick'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnAsignarPedidoVenta',
                    itemId: 'btnAsignarPedidoVenta',
                    width: 120,
                    iconCls: 'fa fa-link icon16 iconColorDarkBlue',
                    text: 'Asignar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onBtnAsignarPedidoVentaClick'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnDesasignarPedidoVenta',
                    itemId: 'btnDesasignarPedidoVenta',
                    width: 120,
                    iconCls: 'fa fa-chain-broken icon16 iconColorDarkBlue',
                    text: 'Desasignar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onBtnDesasignarPedidoVentaClick'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnFacturarPedidoVenta',
                    itemId: 'btnFacturarPedidoVenta',
                    width: 120,
                    iconCls: 'fa fa-gg-circle icon16 iconColorDarkBlue',
                    text: 'Facturar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onBtnFacturarPedidoVentaClick'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnDesligarPedidoVenta',
                    itemId: 'btnDesligarPedidoVenta',
                    width: 120,
                    iconCls: 'fa fa-chain-broken icon16 iconColorDarkRed',
                    text: 'Desligar Fact.',
                    textAlign: 'left',
                    listeners: {
                        click: 'onBtnDesasignarPedidoVentaClick1'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnCancelarPedidoVenta',
                    itemId: 'btnCancelarPedidoVenta',
                    width: 120,
                    iconCls: 'fa fa-stop-circle icon16 iconColorDarkRed',
                    text: 'Cancelar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onBtnConfirmarPedidoVentaClick1111'
                    }
                },
                {
                    xtype: 'tbfill',
                    id: 'fillPedidoVenta',
                    itemId: 'fillPedidoVenta'
                },
                {
                    xtype: 'button',
                    id: 'btnImprimirPedidoVenta',
                    itemId: 'btnImprimirPedidoVenta',
                    width: 120,
                    iconCls: 'fa fa-file-text icon16 iconColorDarkBlue',
                    text: 'Imprimir',
                    textAlign: 'left',
                    listeners: {
                        click: 'onBtnImprimirPedidoVentaClick'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnCerrarPedidoVenta',
                    itemId: 'btnCerrarPedidoVenta',
                    width: 130,
                    iconCls: 'fa fa-window-close icon16 iconColorRed',
                    text: 'Cerrar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onBtnCerrarPedidoVentaClick'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'form',
            preparaInterfaz: function() {
                if(Ext.getCmp('formPedidoVenta').operacionPedidoVenta === 'Crear'){
                    var fechaActual = new Date();
                    elf.writeElement('dfFechaPedido',fechaActual);

                    elf.writeElement('tfUsuarioImplantacion'       ,elf.getSessionData('user_id'));
                    elf.writeElement('tfUsuarioNombreImplantacion' ,elf.getSessionData('user_name'));
                    elf.writeElement('dfFechaImplantacion'         ,fechaActual);

                    elf.hideElement('fieldsetPedido');
                    elf.hideElement('fieldsetBotonesLinea');
                    elf.hideElement('fieldsetCargosAlCliente');
                    elf.hideElement('fieldsetSubtotales');
                    elf.hideElement('fieldsetValores');
                    elf.hideElement('tabPanelPedidoVentaGrids');
                    elf.hideElement('gridPedidoVentaLinea');

                    elf.hideElement('btnConfirmarPedidoVenta');
                    elf.hideElement('btnAsignarPedidoVenta');
                    elf.hideElement('btnDesasignarPedidoVenta');
                    elf.hideElement('btnFacturarPedidoVenta');
                    elf.hideElement('btnDesligarPedidoVenta');
                    elf.hideElement('btnCancelarPedidoVenta');
                    elf.hideElement('btnImprimirPedidoVenta');
                }

                console.warn('preparaInterfaz::Cargando los Combos de Usuarios');

                var arrayCombos = new Array();
                arrayCombos.push('CodigoGerenteRegional');
                arrayCombos.push('CodigoVendedor');
                arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaCombosUsuario);

                var arrayCombos = new Array();
                var objConfig   = new Object();
                objConfig.id           = 'CodigoConsecionario';
                objConfig.fieldValue   = 'codigo_consecionario';
                objConfig.fieldDisplay = 'descripcion';
                objConfig.filterValue  = undefined;

                arrayCombos.push(objConfig);
                arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaCombosConfig);


                var arrayCombos = new Array();
                var objConfig   = new Object();
                objConfig.id           = 'FiltroTipoEntrega';
                objConfig.fieldValue   = 'descripcion';
                objConfig.fieldDisplay = 'descripcion';
                objConfig.filterValue  = undefined;

                arrayCombos.push(objConfig);
                arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaCombosConfig);

                var arrayCombos = new Array();
                var objConfig   = new Object();
                objConfig.id           = 'CodigoConsecionarioEntrega';
                objConfig.fieldValue   = 'codigo_consecionario';
                objConfig.fieldDisplay = 'descripcion';
                objConfig.filterValue  = undefined;

                console.warn('¡Asignando el Combo de consecionario Entrega');

                arrayCombos.push(objConfig);
                arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaCombosConfig);


                console.warn('¡Asignando el Combo de Proveedor');

                arrayCombos.push(objConfig);
                arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaCombosConfig);


                var arrayCombos = new Array();
                var objConfig   = new Object();

                objConfig.idComboBox   = 'cbxProveedor';
                objConfig.idDataBridge = 'listaProveedor';
                objConfig.id           = 'hwtProveedor';
                objConfig.fieldValue   = 'codigo_proveedor';
                objConfig.fieldDisplay = 'razon_social';
                objConfig.filterValue  = undefined;

                console.warn('¡Asignando el Combo de Proveedeor');

                arrayCombos.push(objConfig);
                arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaCombosConfig);

            },
            presentarPedidoVenta: function() {
                var recordPedidoVenta = Ext.getCmp('gridPedidoVenta').recordActivo;

                var apiController = 'apiPedidoVenta';
                var apiMethod     = 'datosPedidoVenta';
                var objJsonData   = new Object();
                objJsonData.rowidPedidoVenta = recordPedidoVenta.rowid;
                objJsonData.numPedido        = recordPedidoVenta.num_pedido;

                var objJsonRequest = new Object();
                objJsonRequest.apiController = apiController;
                objJsonRequest.apiMethod     = apiMethod;
                objJsonRequest.apiData       = JSON.stringify(objJsonData);

                var functionSuccess = function(){
                    var jsonData = elf.getInfoDataBridge('datosPedidoVenta');
                    console.log(jsonData);

                    Ext.getCmp('formPedidoVenta').preparaInterfaz();

                    elf.showRecord(jsonData,'hwtPedidoVenta','edit');

                    elf.hideElement('btnDesasignarPedidoVenta');
                    elf.hideElement('btnDesligarPedidoVenta');

                    var hwtPedidoVenta = jsonData.hwtPedidoVenta;
                    if(parseInt(hwtPedidoVenta.situacion_pedido) >= 2){
                        elf.hideElement('btnGuardarPedidoVenta');
                        elf.hideElement('btnConfirmarPedidoVenta');
                    }

                    if(parseInt(hwtPedidoVenta.situacion_pedido) >= 3){
                        elf.showElement('btnDesasignarPedidoVenta');
                        elf.hideElement('btnAsignarPedidoVenta');
                        elf.hideElement('btnGuardarPedidoVenta');
                        elf.hideElement('btnCancelarPedidoVenta');

                        elf.hideElement('fieldsetBotonesLinea');
                        elf.hideElement('fieldsetBotonesAdicionales');
                    }

                    if(parseInt(hwtPedidoVenta.situacion_pedido) >= 4){
                        elf.showElement('btnDesligarPedidoVenta');
                        elf.hideElement('btnDesasignarPedidoVenta');
                        elf.hideElement('btnFacturarPedidoVenta');
                        elf.hideElement('btnGuardarPedidoVenta');
                        elf.hideElement('btnCancelarPedidoVenta');
                    }

                    if(parseInt(hwtPedidoVenta.situacion_pedido) === 6){
                        elf.hideElement('btnDesasignarPedidoVenta');
                        elf.hideElement('btnImprimirPedidoVenta');
                    }

                    elf.hideElement('btnZoomCliente');
                    elf.refreshGrid('gridPedidoVentaLinea');
                    elf.refreshGrid('gridPedidoVentaAdicional');
                };

                var functionFailure = function(){
                    var jsonData = elf.getInfoDataBridge('datosPedidoVenta');
                    console.warn(jsonData);

                    elf.showInfo(jsonData,'error');
                };


                elf.doDataBridge(objJsonRequest,
                functionSuccess,
                null,
                functionFailure,
                null);


            },
            guardarPedidoVenta: function() {
                if(Ext.getCmp('formPedidoVenta').isValid()){
                    var formRegistro  = 'formPedidoVenta';
                    var apiController = 'apiPedidoVenta';
                    var apiMethod     = 'grabaPedidoVenta';

                    var objJsonRequest = new Object();
                    objJsonRequest.apiController = apiController;
                    objJsonRequest.apiMethod     = apiMethod;
                    objJsonRequest.apiData       = elf.prepareFormFields(formRegistro);

                    var functionSuccess = function(){
                        var jsonData = elf.getInfoDataBridge(apiMethod);

                        elf.showInfo(jsonData, 'information');

                        if(Ext.getCmp('formPedidoVenta').operacionPedidoVenta === 'Crear'){
                            Ext.getCmp('tabPanelPedidoVenta').setActiveTab(0);

                            elf.showElement('tabPanelPedidoVentaGrids');

                            elf.disableElement('tfCodigoCliente');
                            elf.hideElement('btnZoomCliente');

                            elf.showElement('fieldsetPedido');
                            elf.showElement('fieldsetBotonesLinea');
                            elf.showElement('fieldsetCargosAlCliente');
                            elf.showElement('fieldsetSubtotales');
                            elf.showElement('fieldsetValores');
                            elf.showElement('gridPedidoVentaLinea');

                            elf.writeElement('tfNumPedido'       ,
                            jsonData.camposRegistro.num_pedido);

                            elf.writeElement('tfSituacionPedido' ,
                            jsonData.camposRegistro.situacion_pedido);

                            elf.writeElement('tfSituacionPedidoDescripcion' ,
                            jsonData.camposRegistro.situacion_pedido_descripcion);

                            elf.showElement('btnConfirmarPedidoVenta');
                            elf.showElement('btnImprimirPedidoVenta');
                            elf.showElement('btnAsignarPedidoVenta');

                            elf.focusElement('tfInsertarCodigo');

                        }

                        if(Ext.getCmp('formPedidoVenta').operacionPedidoVenta === 'Actualizar'){
                            elf.closeWindow('winPedidoVenta');
                            elf.refreshGrid('gridPedidoVenta');
                        }
                    };

                    var functionFailure = function(){
                        var jsonData = elf.getInfoDataBridge(apiMethod);
                        elf.showInfo(jsonData, 'error', 'tfCodigoCliente');
                    };

                    elf.doDataBridge(objJsonRequest,
                    functionSuccess,
                    null,
                    functionFailure,
                    null);
                } //Formulario Valido
                else{
                    elf.message('error',
                    'Formulario Incompleto',
                    'Debe de llenar los Campos Requeridos');
                }
            },
            confirmarPedidoVenta: function() {
                if(Ext.getCmp('formPedidoVenta').isValid()){
                    var formRegistro  = 'formPedidoVenta';
                    var apiController = 'apiPedidoVenta';
                    var apiMethod     = 'confirmarPedidoVenta';

                    var objJsonRequest = new Object();
                    objJsonRequest.apiController = apiController;
                    objJsonRequest.apiMethod     = apiMethod;
                    objJsonRequest.apiData       = elf.prepareFormFields(formRegistro);

                    var functionSuccess = function(){
                        var jsonData = elf.getInfoDataBridge(apiMethod);

                        elf.showInfo(jsonData, 'information');

                        Ext.getCmp('tabPanelPedidoVenta').setActiveTab(0);
                        elf.writeElement('tfSituacionPedido'            ,jsonData.hwtPedidoVenta.situacion_pedido);
                        elf.writeElement('tfSituacionPedidoDescripcion' ,jsonData.hwtPedidoVenta.situacion_pedido_descripcion);
                        elf.hideElement('btnConfirmarPedidoVenta');
                        elf.refreshGrid('gridPedidoVenta');
                    };

                    var functionFailure = function(){
                        var jsonData = elf.getInfoDataBridge(apiMethod);
                        elf.showInfo(jsonData, 'error', 'tfCodigoCliente');
                    };

                    elf.doDataBridge(objJsonRequest,
                    functionSuccess,
                    null,
                    functionFailure,
                    null);
                } //Formulario Valido
                else{
                    elf.message('error',
                    'Formulario Incompleto',
                    'Debe de llenar los Campos Requeridos');
                }
            },
            asignarPedidoVenta: function() {
                if(Ext.getCmp('formPedidoVenta').isValid()){
                    var formRegistro  = 'formPedidoVenta';
                    var apiController = 'apiPedidoVenta';
                    var apiMethod     = 'asignarPedidoVenta';

                    var objJsonRequest = new Object();
                    objJsonRequest.apiController = apiController;
                    objJsonRequest.apiMethod     = apiMethod;
                    objJsonRequest.apiData       = elf.prepareFormFields(formRegistro);

                    var functionSuccess = function(){
                        var jsonData = elf.getInfoDataBridge(apiMethod);

                        elf.showInfo(jsonData, 'information');

                        Ext.getCmp('tabPanelPedidoVenta').setActiveTab(0);

                        elf.writeElement('tfSituacionPedido',
                        jsonData.hwtPedidoVenta.situacion_pedido);

                        elf.writeElement('tfSituacionPedidoDescripcion',
                        jsonData.hwtPedidoVenta.situacion_pedido_descripcion);

                        elf.hideElement('btnGuardarPedidoVenta');
                        elf.hideElement('btnConfirmarPedidoVenta');
                        elf.hideElement('btnAsignarPedidoVenta');
                        elf.hideElement('btnCancelarPedidoVenta');

                        elf.showElement('btnDesasignarPedidoVenta');
                        elf.refreshGrid('gridPedidoVenta');
                        elf.refreshGrid('gridPedidoVentaLinea');
                    };

                    var functionFailure = function(){
                        var jsonData = elf.getInfoDataBridge(apiMethod);
                        elf.showInfo(jsonData, 'error', 'tfCodigoCliente');
                    };

                    elf.doDataBridge(objJsonRequest,
                    functionSuccess,
                    null,
                    functionFailure,
                    null);
                } //Formulario Valido
                else{
                    elf.message('error',
                    'Formulario Incompleto',
                    'Debe de llenar los Campos Requeridos');
                }
            },
            desligarPedidoVenta: function() {
                var recordPedidoVenta = Ext.getCmp('gridPedidoVenta').recordActivo;

                var msgFuncion = function(){
                    if(Ext.getCmp('formPedidoVenta').isValid()){
                        var formRegistro  = 'formPedidoVenta';
                        var apiController = 'apiPedidoVenta';
                        var apiMethod     = 'desligarIntegracionFactura';

                        var objJsonRequest = new Object();
                        objJsonRequest.apiController = apiController;
                        objJsonRequest.apiMethod     = apiMethod;
                        objJsonRequest.apiData       = elf.prepareFormFields(formRegistro);

                        var functionSuccess = function(){
                            var jsonData = elf.getInfoDataBridge(apiMethod);

                            elf.showInfo(jsonData, 'information');

                            Ext.getCmp('tabPanelPedidoVenta').setActiveTab(0);

                            elf.writeElement('tfSituacionPedido',
                            jsonData.hwtPedidoVenta.situacion_pedido);

                            elf.writeElement('tfSituacionPedidoDescripcion',
                            jsonData.hwtPedidoVenta.situacion_pedido_descripcion);

                            elf.hideElement('btnConfirmarPedidoVenta');
                            elf.hideElement('btnAsignarPedidoVenta');
                            elf.hideElement('btnCancelarPedidoVenta');
                            elf.hideElement('btnDesligarPedidoVenta');

                            elf.showElement('btnFacturarPedidoVenta');
                            elf.refreshGrid('gridPedidoVenta');
                        };

                        var functionFailure = function(){
                            var jsonData = elf.getInfoDataBridge(apiMethod);
                            elf.showInfo(jsonData, 'error', 'tfCodigoCliente');
                        };

                        elf.doDataBridge(objJsonRequest,
                        functionSuccess,
                        null,
                        functionFailure,
                        null);
                    } //Formulario Valido
                    else{
                        elf.message('error',
                        'Formulario Incompleto',
                        'Debe de llenar los Campos Requeridos');
                    }
                };

                msgTipo      = 'question';
                msgTitulo    = 'Delsigar Factura del Pedido de Venta ' + recordPedidoVenta.num_pedido;
                msgContenido = 'Desea Desligar la Factura generada para el Pedido de Venta No. ' + recordPedidoVenta.num_pedido + '?';

                elf.message(msgTipo,msgTitulo,msgContenido,msgFuncion);
            },
            desasignarPedidoVenta: function() {
                var recordPedidoVenta = Ext.getCmp('gridPedidoVenta').recordActivo;

                var msgFuncion = function(){
                    if(Ext.getCmp('formPedidoVenta').isValid()){
                        var formRegistro  = 'formPedidoVenta';
                        var apiController = 'apiPedidoVenta';
                        var apiMethod     = 'desasignarPedidoVenta';

                        var objJsonRequest = new Object();
                        objJsonRequest.apiController = apiController;
                        objJsonRequest.apiMethod     = apiMethod;
                        objJsonRequest.apiData       = elf.prepareFormFields(formRegistro);

                        var functionSuccess = function(){
                            var jsonData = elf.getInfoDataBridge(apiMethod);

                            elf.showInfo(jsonData, 'information');

                            Ext.getCmp('tabPanelPedidoVenta').setActiveTab(0);

                            elf.writeElement('tfSituacionPedido',
                            jsonData.hwtPedidoVenta.situacion_pedido);

                            elf.writeElement('tfSituacionPedidoDescripcion',
                            jsonData.hwtPedidoVenta.situacion_pedido_descripcion);


                            elf.showElement('btnAsignarPedidoVenta');
                            elf.showElement('btnCancelarPedidoVenta');

                            elf.hideElement('btnConfirmarPedidoVenta');
                            elf.hideElement('btnDesasignarPedidoVenta');

                            elf.refreshGrid('gridPedidoVenta');
                            elf.refreshGrid('gridPedidoVentaLinea');
                        };

                        var functionFailure = function(){
                            var jsonData = elf.getInfoDataBridge(apiMethod);
                            elf.showInfo(jsonData, 'error', 'tfCodigoCliente');
                        };

                        elf.doDataBridge(objJsonRequest,
                        functionSuccess,
                        null,
                        functionFailure,
                        null);
                    } //Formulario Valido
                    else{
                        elf.message('error',
                        'Formulario Incompleto',
                        'Debe de llenar los Campos Requeridos');
                    }
                };

                msgTipo      = 'question';
                msgTitulo    = 'Desasignar Pedido de Venta ' + recordPedidoVenta.num_pedido;
                msgContenido = 'Desea Desasignar el Pedido de Venta No. ' + recordPedidoVenta.num_pedido + '?</br>' +
                '(Todas las Unidades relacionadas se estableceran como Disponibles.)';

                elf.message(msgTipo,msgTitulo,msgContenido,msgFuncion);
            },
            entregarPedidoVenta: function() {
                var recordPedidoVenta = Ext.getCmp('gridPedidoVenta').recordActivo;

                var msgFuncion = function(){
                    if(Ext.getCmp('formPedidoVenta').isValid()){
                        var formRegistro  = 'formPedidoVenta';
                        var apiController = 'apiPedidoVenta';
                        var apiMethod     = 'desligarIntegracionFactura';

                        var objJsonRequest = new Object();
                        objJsonRequest.apiController = apiController;
                        objJsonRequest.apiMethod     = apiMethod;
                        objJsonRequest.apiData       = elf.prepareFormFields(formRegistro);

                        var functionSuccess = function(){
                            var jsonData = elf.getInfoDataBridge(apiMethod);

                            elf.showInfo(jsonData, 'information');

                            Ext.getCmp('tabPanelPedidoVenta').setActiveTab(0);

                            elf.writeElement('tfSituacionPedido',
                            jsonData.hwtPedidoVenta.situacion_pedido);

                            elf.writeElement('tfSituacionPedidoDescripcion',
                            jsonData.hwtPedidoVenta.situacion_pedido_descripcion);

                            elf.hideElement('btnConfirmarPedidoVenta');
                            elf.hideElement('btnAsignarPedidoVenta');
                            elf.hideElement('btnCancelarPedidoVenta');
                            elf.hideElement('btnDesligarPedidoVenta');

                            elf.showElement('btnFacturarPedidoVenta');
                            elf.refreshGrid('gridPedidoVenta');
                        };

                        var functionFailure = function(){
                            var jsonData = elf.getInfoDataBridge(apiMethod);
                            elf.showInfo(jsonData, 'error', 'tfCodigoCliente');
                        };

                        elf.doDataBridge(objJsonRequest,
                        functionSuccess,
                        null,
                        functionFailure,
                        null);
                    } //Formulario Valido
                    else{
                        elf.message('error',
                        'Formulario Incompleto',
                        'Debe de llenar los Campos Requeridos');
                    }
                };

                msgTipo      = 'question';
                msgTitulo    = 'Delsigar Factura del Pedido de Venta ' + recordPedidoVenta.num_pedido;
                msgContenido = 'Desea Desligar la Factura generada para el Pedido de Venta No. ' + recordPedidoVenta.num_pedido + '?';

                elf.message(msgTipo,msgTitulo,msgContenido,msgFuncion);
            },
            cancelarPedidoVenta: function() {
                var recordPedidoVenta = Ext.getCmp('gridPedidoVenta').recordActivo;

                msgFuncion   = function(){
                    if(Ext.getCmp('formPedidoVenta').isValid()){
                        var formRegistro  = 'formPedidoVenta';
                        var apiController = 'apiPedidoVenta';
                        var apiMethod     = 'cancelarPedidoVenta';

                        var objJsonRequest = new Object();
                        objJsonRequest.apiController = apiController;
                        objJsonRequest.apiMethod     = apiMethod;
                        objJsonRequest.apiData       = elf.prepareFormFields(formRegistro);

                        var functionSuccess = function(){
                            var apiMethod = 'cancelarPedidoVenta';
                            var jsonData  = elf.getInfoDataBridge(apiMethod);

                            elf.showInfo(jsonData, 'information');

                            Ext.getCmp('tabPanelPedidoVenta').setActiveTab(0);
                            elf.writeElement('tfSituacionPedido'            ,jsonData.hwtPedidoVenta.situacion_pedido);
                            elf.writeElement('tfSituacionPedidoDescripcion' ,jsonData.hwtPedidoVenta.situacion_pedido_descripcion);
                            elf.refreshGrid('gridPedidoVenta');
                            elf.closeWindow('winPedidoVenta');
                        };

                        var functionFailure = function(){
                            var apiMethod = 'cancelarPedidoVenta';
                            var jsonData  = elf.getInfoDataBridge(apiMethod);
                            elf.showInfo(jsonData, 'error', 'tfCodigoCliente');
                        };

                        elf.doDataBridge(objJsonRequest,
                        functionSuccess,
                        null,
                        functionFailure,
                        null);
                    } //Formulario Valido
                    else{
                        elf.message('error',
                        'Formulario Incompleto',
                        'Debe de llenar los Campos Requeridos');
                    }
                };

                msgTipo      = 'question';
                msgTitulo    = 'Cancelar Pedido de Venta ' + recordPedidoVenta.num_pedido;
                msgContenido = 'Desea Cancelar el Pedido de Venta No. ' + recordPedidoVenta.num_pedido + '?';

                elf.message(msgTipo,msgTitulo,msgContenido,msgFuncion);


            },
            imprimirPedidoVenta: function() {
                var apiController = 'apiPedidoVenta';
                var apiMethod     = 'generarFormatoPedido';
                var objJsonData   = new Object();
                objJsonData.numPedido = elf.readElement('tfNumPedido');

                var objJsonRequest = new Object();
                objJsonRequest.apiController = apiController;
                objJsonRequest.apiMethod     = apiMethod;
                objJsonRequest.apiData       = JSON.stringify(objJsonData);

                var functionSuccess = function(){
                    var jsonData = elf.getInfoDataBridge('generarFormatoPedido');
                    var archivoGenerado = elf.getGeneratedFile(jsonData.archivoGenerado.nombre);
                    window.open(archivoGenerado);
                };

                var functionFailure = function(){
                    var jsonData = elf.getInfoDataBridge('generarFormatoPedido');

                    elf.showInfo(jsonData,'error');
                };


                elf.doDataBridge(objJsonRequest,
                functionSuccess,
                null,
                functionFailure,
                null);
            },
            despliegaTotales: function(pJsonData) {
                console.log('Presentando los Totales del Documento');
                console.log(pJsonData);
                //ECRC: Presentando los Totales del Documento
                var hwtPedidoVenta = pJsonData.hwtPedidoVenta[0];

                elf.writeElement('tfCantidadUnidades',
                hwtPedidoVenta.cantidad_unidades);

                elf.writeElement('tfValorConCargoCliente'   ,
                Ext.util.Format.number(hwtPedidoVenta.valor_con_cargo_cliente,
                '0,000.00'));

                elf.writeElement('tfValorSinCargoCliente'   ,
                Ext.util.Format.number(hwtPedidoVenta.valor_sin_cargo_cliente,
                '0,000.00'));

                elf.writeElement('tfValorSubtotalUnidades'   ,
                Ext.util.Format.number(hwtPedidoVenta.valor_subtotal_unidades,
                '0,000.00'));

                elf.writeElement('tfValorSubtotalAdicionales'   ,
                Ext.util.Format.number(hwtPedidoVenta.valor_subtotal_adicionales,
                '0,000.00'));

                elf.writeElement('tfValorSubtotal'   ,
                Ext.util.Format.number(hwtPedidoVenta.valor_subtotal,
                '0,000.00'));

                elf.writeElement('tfValorImpuesto'   ,
                Ext.util.Format.number(hwtPedidoVenta.valor_impuesto,
                '0,000.00'));

                elf.writeElement('tfValorTotal'      ,
                Ext.util.Format.number(hwtPedidoVenta.valor_total,
                '0,000.00'));

            },
            agregarUnidad: function() {
                if(elf.readElement('tfInsertarCodigo') === ''){
                    msgTipo      = 'error';
                    msgTitulo    = 'Codigo de Unidad no informado';
                    msgContenido = 'Debe informar un Código de Unidad válido para agregarlo a la Cotización.';
                    elf.message(msgTipo,msgTitulo,msgContenido);
                    return;
                }

                var apiController          = 'apiPedidoVenta';
                var apiMethod              = 'grabaPedidoVentaLinea';
                var objJsonData            = new Object();
                objJsonData.tfNumPedido    = elf.readElement('tfNumPedido');
                objJsonData.tfCodigoUnidad = elf.readElement('tfInsertarCodigo');

                var objJsonRequest = new Object();
                objJsonRequest.apiController = apiController;
                objJsonRequest.apiMethod     = apiMethod;
                objJsonRequest.apiData       = elf.packData(objJsonData);

                var functionSuccess = function(){
                    var jsonData = elf.getInfoDataBridge(apiMethod);

                    Ext.getCmp('formPedidoVenta').despliegaTotales(jsonData);

                    elf.refreshGrid('gridPedidoVentaLinea');
                    elf.writeElement('tfInsertarCodigo','');
                    elf.focusElement('tfInsertarCodigo');
                };

                var functionFailure = function(){
                    var jsonData = elf.getInfoDataBridge(apiMethod);
                    elf.showInfo(jsonData, 'error', 'tfInsertarCodigo');
                };

                elf.doDataBridge(objJsonRequest,
                functionSuccess,
                null,
                functionFailure,
                null);
            },
            eliminarUnidad: function() {
                var gridPedidoVentaLinea = Ext.getCmp('gridPedidoVentaLinea');
                var recordPedidoVentaLinea = gridPedidoVentaLinea.recordActivo;

                if(recordPedidoVentaLinea === undefined){
                    msgTipo      = 'error';
                    msgTitulo    = 'Eliminar Unidad del Pedido de Venta';
                    msgContenido = 'Debe seleccionar un registro válido para realizar ésta operación';
                    elf.message(msgTipo,msgTitulo,msgContenido);
                    return;
                }

                var msgFuncion = function(){
                    var gridPedidoVentaLinea = Ext.getCmp('gridPedidoVentaLinea');
                    var recordPedidoVentaLinea = gridPedidoVentaLinea.recordActivo;
                    var apiController = 'apiPedidoVenta';
                    var apiMethod     = 'eliminarPedidoVentaLinea';
                    var objJsonData   = new Object();
                    objJsonData.rowidPedidoVentaLinea = recordPedidoVentaLinea.rowid;
                    objJsonData.numPedido             = recordPedidoVentaLinea.num_pedido;

                    var objJsonRequest = new Object();
                    objJsonRequest.apiController = apiController;
                    objJsonRequest.apiMethod     = apiMethod;
                    objJsonRequest.apiData       = elf.packData(objJsonData);

                    var functionSuccess = function(){
                        var jsonData = elf.getInfoDataBridge('eliminarPedidoVentaLinea');

                        Ext.getCmp('formPedidoVenta').despliegaTotales(jsonData);

                        elf.refreshGrid('gridPedidoVentaLinea');
                        elf.showInfo(jsonData,'information');
                    };

                    var functionFailure = function(){
                        var jsonData = elf.getInfoDataBridge('eliminarPedidoVentaLinea');
                        console.warn(jsonData);

                        elf.showInfo(jsonData,'error');
                    };


                    elf.doDataBridge(objJsonRequest,
                    functionSuccess,
                    null,
                    functionFailure,
                    null);
                }; //msgFuncion


                msgTipo      = 'question';
                msgTitulo    = 'Eliminar Unidad del Pedido de Venta';
                msgContenido = 'Eliminar la Unidad con Código ' + recordPedidoVentaLinea.codigo + ' ' +
                'del Pedido de Venta ' + recordPedidoVentaLinea.num_pedido + '?';

                elf.message(msgTipo,msgTitulo,msgContenido,msgFuncion);
            },
            entregarUnidad: function() {
                var gridPedidoVentaLinea = Ext.getCmp('gridPedidoVentaLinea');
                var gridPedidoVenta      = Ext.getCmp('gridPedidoVenta');

                var recordPedidoVentaLinea = gridPedidoVentaLinea.recordActivo;
                var recordPedidoVenta      = gridPedidoVenta.recordActivo;

                if(recordPedidoVentaLinea === undefined){
                    msgTipo      = 'error';
                    msgTitulo    = 'Entrega de Unidad al Cliente';
                    msgContenido = 'Debe seleccionar un registro válido para realizar ésta operación';
                    elf.message(msgTipo,msgTitulo,msgContenido);
                    return;
                }

                var msgFuncion = function(){
                    var gridPedidoVentaLinea = Ext.getCmp('gridPedidoVentaLinea');
                    var recordPedidoVentaLinea = gridPedidoVentaLinea.recordActivo;
                    var apiController = 'apiPedidoVenta';
                    var apiMethod     = 'entregarPedidoVentaLinea';
                    var objJsonData   = new Object();
                    objJsonData.rowidPedidoVentaLinea = recordPedidoVentaLinea.rowid;
                    objJsonData.numPedido             = recordPedidoVentaLinea.num_pedido;

                    var objJsonRequest = new Object();
                    objJsonRequest.apiController = apiController;
                    objJsonRequest.apiMethod     = apiMethod;
                    objJsonRequest.apiData       = elf.packData(objJsonData);

                    var functionSuccess = function(){
                        var jsonData = elf.getInfoDataBridge('entregarPedidoVentaLinea');
                        elf.showInfo(jsonData,'information');

                        var hwtPedidoVenta = jsonData.hwtPedidoVenta;

                        elf.writeElement('tfSituacionPedido',
                        hwtPedidoVenta.situacion_pedido);

                        elf.writeElement('tfSituacionPedidoDescripcion',
                        hwtPedidoVenta.situacion_pedido_descripcion);

                        elf.refreshGrid('gridPedidoVentaLinea');
                    };

                    var functionFailure = function(){
                        var jsonData = elf.getInfoDataBridge('entregarPedidoVentaLinea');
                        elf.showInfo(jsonData,'error');
                    };

                    elf.doDataBridge(objJsonRequest,
                    functionSuccess,
                    null,
                    functionFailure,
                    null);
                }; //msgFuncion


                msgTipo      = 'question';
                msgTitulo    = 'Entrega de Unidad al Cliente';
                msgContenido = 'Confirmar la Entrega de la Unidad con Código ' + recordPedidoVentaLinea.codigo + ' ' +
                'al Cliente ' + recordPedidoVenta.cliente_nombre + '?';

                elf.message(msgTipo,msgTitulo,msgContenido,msgFuncion);
            },
            agregarAdicional: function() {
                if(elf.readElement('tfInsertarAdicional') === '' ||
                (parseInt(elf.readElement('tfInsertarConCargoCliente')) === 0 &&
                parseInt(elf.readElement('tfInsertarSinCargoCliente')) === 0)){

                    msgTipo      = 'error';
                    msgTitulo    = 'Información para cargo Adicional no informada';
                    msgContenido = 'Debe informar una Descripción de Cargo Adicional y un Valor para agregarlo al Pedido de Venta.';
                    elf.message(msgTipo,msgTitulo,msgContenido);
                    return;
                }

                var apiController                  = 'apiPedidoVenta';
                var apiMethod                      = 'grabaPedidoVentaAdicional';
                var objJsonData                    = new Object();
                objJsonData.tfNumPedido            = elf.readElement('tfNumPedido');
                objJsonData.tfDescripcionAdicional = elf.readElement('tfInsertarAdicional');
                objJsonData.tfCodigoProveedor      = elf.readElement('cbxProveedor');
                objJsonData.tfValConCargoCliente   = elf.readElement('tfInsertarConCargoCliente');
                objJsonData.tfValSinCargoCliente   = elf.readElement('tfInsertarSinCargoCliente');

                var objJsonRequest = new Object();
                objJsonRequest.apiController = apiController;
                objJsonRequest.apiMethod     = apiMethod;
                objJsonRequest.apiData       = elf.packData(objJsonData);

                var functionSuccess = function(){
                    var jsonData = elf.getInfoDataBridge(apiMethod);

                    console.log(jsonData);

                    Ext.getCmp('formPedidoVenta').despliegaTotales(jsonData);

                    elf.refreshGrid('gridPedidoVentaLinea');
                    elf.refreshGrid('gridPedidoVentaAdicional');

                    elf.writeElement('tfInsertarAdicional','');
                    elf.writeElement('tfInsertarConCargoCliente','');
                    elf.writeElement('tfInsertarSinCargoCliente','');

                    elf.focusElement('tfInsertarAdicional');
                };

                var functionFailure = function(){
                    var jsonData = elf.getInfoDataBridge(apiMethod);
                    console.warn('Success::grabaCotizacion:');
                    console.warn(jsonData);
                };

                elf.doDataBridge(objJsonRequest,
                functionSuccess,
                null,
                functionFailure,
                null);
            },
            eliminarAdicional: function() {
                var gridPedidoVentaAdicional = Ext.getCmp('gridPedidoVentaAdicional');
                var recordPedidoVentaAdicional = gridPedidoVentaAdicional.recordActivo;

                if(recordPedidoVentaAdicional === undefined){
                    msgTipo      = 'error';
                    msgTitulo    = 'Eliminar Cargo Adicional del Pedido de Venta';
                    msgContenido = 'Debe seleccionar un registro válido para realizar ésta operación';
                    elf.message(msgTipo,msgTitulo,msgContenido);
                    return;
                }

                var msgFuncion = function(){
                    var gridPedidoVentaAdicional = Ext.getCmp('gridPedidoVentaAdicional');
                    var recordPedidoVentaAdicional = gridPedidoVentaAdicional.recordActivo;
                    var apiController = 'apiPedidoVenta';
                    var apiMethod     = 'eliminarPedidoVentaAdicional';
                    var objJsonData   = new Object();
                    objJsonData.rowidPedidoVentaAdicional = recordPedidoVentaAdicional.rowid;
                    objJsonData.numPedido             = recordPedidoVentaAdicional.num_pedido;

                    var objJsonRequest = new Object();
                    objJsonRequest.apiController = apiController;
                    objJsonRequest.apiMethod     = apiMethod;
                    objJsonRequest.apiData       = elf.packData(objJsonData);

                    var functionSuccess = function(){
                        var jsonData = elf.getInfoDataBridge('eliminarPedidoVentaAdicional');

                        Ext.getCmp('formPedidoVenta').despliegaTotales(jsonData);

                        elf.refreshGrid('gridPedidoVentaAdicional');
                        elf.showInfo(jsonData,'information');
                    };

                    var functionFailure = function(){
                        var jsonData = elf.getInfoDataBridge('eliminarPedidoVentaAdicional');
                        console.warn(jsonData);

                        elf.showInfo(jsonData,'error');
                    };


                    elf.doDataBridge(objJsonRequest,
                    functionSuccess,
                    null,
                    functionFailure,
                    null);
                }; //msgFuncion


                msgTipo      = 'question';
                msgTitulo    = 'Eliminar Unidad del Pedido de Venta';
                msgContenido = 'Eliminar el Cargo Adicional ' + recordPedidoVentaAdicional.descripcion + ' ' +
                'del Pedido de Venta ' + recordPedidoVentaAdicional.num_pedido + '?';

                elf.message(msgTipo,msgTitulo,msgContenido,msgFuncion);
            },
            id: 'formPedidoVenta',
            itemId: 'formPedidoVenta',
            bodyCls: 'formBackground',
            bodyPadding: 10,
            items: [
                {
                    xtype: 'tabpanel',
                    id: 'tabPanelPedidoVenta',
                    itemId: 'tabPanelPedidoVenta',
                    activeTab: 0,
                    items: [
                        {
                            xtype: 'panel',
                            height: 135,
                            id: 'tabPedido',
                            itemId: 'tabPedido',
                            bodyCls: 'formBackground',
                            title: 'Generales',
                            tabConfig: {
                                xtype: 'tab',
                                width: 120
                            },
                            items: [
                                {
                                    xtype: 'fieldset',
                                    id: 'fieldsetPedido',
                                    itemId: 'fieldsetPedido',
                                    layout: 'column',
                                    title: '<b>Pedido</b>',
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'tfNumPedido',
                                            itemId: 'tfNumPedido',
                                            margin: '0 3 3 0',
                                            width: 200,
                                            fieldLabel: 'Pedido',
                                            labelWidth: 90
                                        },
                                        {
                                            xtype: 'textfield',
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'tfSituacionPedido',
                                            itemId: 'tfSituacionPedido',
                                            margin: '0 3 3 0',
                                            width: 130,
                                            fieldLabel: 'Situacion',
                                            labelWidth: 90
                                        },
                                        {
                                            xtype: 'textfield',
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'tfSituacionPedidoDescripcion',
                                            itemId: 'tfSituacionPedidoDescripcion',
                                            margin: '0 3 3 0',
                                            width: 200,
                                            labelWidth: 90
                                        },
                                        {
                                            xtype: 'datefield',
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'dfFechaPedido',
                                            itemId: 'dfFechaPedido',
                                            margin: '0 3 3 45',
                                            width: 200,
                                            fieldLabel: 'Fecha',
                                            labelWidth: 90
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldset',
                                    id: 'fieldsetEntrega',
                                    itemId: 'fieldsetEntrega',
                                    layout: 'column',
                                    title: '<b>Cliente</b>',
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            columnWidth: 0.2,
                                            disabledCls: 'disabledField',
                                            id: 'tfCodigoCliente',
                                            itemId: 'tfCodigoCliente',
                                            margin: '0 0 3 0',
                                            fieldLabel: 'Cliente',
                                            labelWidth: 90,
                                            allowBlank: false
                                        },
                                        {
                                            xtype: 'button',
                                            cls: 'botonZoomWindow',
                                            id: 'btnZoomCliente',
                                            itemId: 'btnZoomCliente',
                                            maxWidth: 32,
                                            iconCls: 'fa fa-search icon16 iconColorWhite',
                                            listeners: {
                                                click: 'onBtnZoomClienteClick'
                                            }
                                        },
                                        {
                                            xtype: 'textfield',
                                            columnWidth: 0.5,
                                            id: 'tfNombreCliente',
                                            itemId: 'tfNombreCliente',
                                            margin: '0 3 3 0',
                                            maxWidth: 290
                                        },
                                        {
                                            xtype: 'textfield',
                                            columnWidth: 0.4,
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'tfRfcCliente',
                                            itemId: 'tfRfcCliente',
                                            margin: '0 3 3 0',
                                            maxWidth: 280,
                                            fieldLabel: 'Cédula RFC',
                                            allowBlank: false
                                        },
                                        {
                                            xtype: 'splitter',
                                            columnWidth: 1,
                                            height: 0
                                        },
                                        {
                                            xtype: 'textfield',
                                            columnWidth: 0.6,
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'tfContactoCliente',
                                            itemId: 'tfContactoCliente',
                                            margin: '0 3 3 0',
                                            maxWidth: 500,
                                            fieldLabel: 'Contacto',
                                            labelWidth: 90
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            height: 135,
                            id: 'tabAdminEntrega',
                            itemId: 'tabAdminEntrega',
                            bodyCls: 'formBackground',
                            title: 'Admin. Ventas',
                            tabConfig: {
                                xtype: 'tab',
                                width: 120
                            },
                            items: [
                                {
                                    xtype: 'fieldset',
                                    id: 'fieldsetAdministracionVentas',
                                    itemId: 'fieldsetAdministracionVentas',
                                    layout: 'column',
                                    title: '<b>Administración de Ventas</b>',
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            columnWidth: 0.6,
                                            id: 'cbxCodigoGerenteRegional',
                                            itemId: 'cbxCodigoGerenteRegional',
                                            margin: '0 5 5 0',
                                            fieldLabel: 'Gerente Regional',
                                            allowBlank: false,
                                            editable: false,
                                            displayField: 'nombre',
                                            queryMode: 'local',
                                            store: 'storeCodigoGerenteRegional',
                                            valueField: 'usuario'
                                        },
                                        {
                                            xtype: 'splitter',
                                            columnWidth: 1,
                                            height: 0
                                        },
                                        {
                                            xtype: 'combobox',
                                            columnWidth: 0.6,
                                            id: 'cbxCodigoVendedor',
                                            itemId: 'cbxCodigoVendedor',
                                            margin: '0 5 5 0',
                                            fieldLabel: 'Vendedor',
                                            allowBlank: false,
                                            editable: false,
                                            displayField: 'nombre',
                                            queryMode: 'local',
                                            store: 'storeCodigoVendedor',
                                            valueField: 'usuario'
                                        },
                                        {
                                            xtype: 'splitter',
                                            columnWidth: 1,
                                            height: 0
                                        },
                                        {
                                            xtype: 'combobox',
                                            columnWidth: 0.6,
                                            id: 'cbxCodigoConsecionario',
                                            itemId: 'cbxCodigoConsecionario',
                                            margin: '0 5 5 0',
                                            fieldLabel: 'Consecionario',
                                            allowBlank: false,
                                            editable: false,
                                            displayField: 'descripcion',
                                            queryMode: 'local',
                                            store: 'storeCodigoConsecionario',
                                            valueField: 'codigo_consecionario',
                                            listeners: {
                                                change: 'onCbxCodigoConsecionarioChange'
                                            }
                                        },
                                        {
                                            xtype: 'splitter',
                                            columnWidth: 1,
                                            height: 0
                                        },
                                        {
                                            xtype: 'combobox',
                                            columnWidth: 0.6,
                                            id: 'cbxCodigoSucursal',
                                            itemId: 'cbxCodigoSucursal',
                                            margin: '0 5 5 0',
                                            fieldLabel: 'Sucursal',
                                            allowBlank: false,
                                            editable: false,
                                            displayField: 'codigo_sucursal',
                                            queryMode: 'local',
                                            store: 'storeCodigoSucursal',
                                            valueField: 'descripcion'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            height: 135,
                            id: 'tabEntrega',
                            itemId: 'tabEntrega',
                            bodyCls: 'formBackground',
                            title: 'Entrega',
                            tabConfig: {
                                xtype: 'tab',
                                width: 120
                            },
                            items: [
                                {
                                    xtype: 'fieldset',
                                    id: 'fieldsetInformacionEntrega',
                                    itemId: 'fieldsetInformacionEntrega',
                                    layout: 'column',
                                    title: '<b>Información de Entrega</b>',
                                    items: [
                                        {
                                            xtype: 'fieldset',
                                            columnWidth: 0.5,
                                            border: 0,
                                            layout: 'column',
                                            items: [
                                                {
                                                    xtype: 'combobox',
                                                    columnWidth: 1,
                                                    id: 'cbxCodigoConsecionarioEntrega',
                                                    itemId: 'cbxCodigoConsecionarioEntrega',
                                                    margin: '0 5 5 0',
                                                    fieldLabel: 'Consecionario',
                                                    editable: false,
                                                    displayField: 'descripcion',
                                                    queryMode: 'local',
                                                    store: 'storeCodigoConsecionarioEntrega',
                                                    valueField: 'codigo_consecionario',
                                                    listeners: {
                                                        change: 'onCbxCodigoConsecionarioEntregaChange'
                                                    }
                                                },
                                                {
                                                    xtype: 'splitter',
                                                    columnWidth: 1,
                                                    height: 0
                                                },
                                                {
                                                    xtype: 'combobox',
                                                    columnWidth: 1,
                                                    id: 'cbxCodigoSucursalEntrega',
                                                    itemId: 'cbxCodigoSucursalEntrega',
                                                    margin: '0 5 5 0',
                                                    fieldLabel: 'Sucursal',
                                                    editable: false,
                                                    displayField: 'codigo_sucursal',
                                                    queryMode: 'local',
                                                    store: 'storeCodigoSucursalEntrega',
                                                    valueField: 'descripcion'
                                                },
                                                {
                                                    xtype: 'splitter',
                                                    columnWidth: 1,
                                                    height: 0
                                                },
                                                {
                                                    xtype: 'combobox',
                                                    columnWidth: 1,
                                                    id: 'cbxFiltroTipoEntrega',
                                                    itemId: 'cbxFiltroTipoEntrega',
                                                    margin: '0 5 5 0',
                                                    fieldLabel: 'Entregar',
                                                    editable: false,
                                                    displayField: 'descripcion',
                                                    queryMode: 'local',
                                                    store: 'storeFiltroTipoEntrega',
                                                    valueField: 'descripcion'
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'fieldset',
                                            columnWidth: 0.5,
                                            border: 0,
                                            layout: 'column',
                                            items: [
                                                {
                                                    xtype: 'textareafield',
                                                    columnWidth: 1,
                                                    id: 'tfEntregaObservaciones',
                                                    itemId: 'tfEntregaObservaciones',
                                                    margin: '0 5 5 0',
                                                    fieldLabel: 'Observaciones'
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            height: 135,
                            bodyCls: 'formBackground',
                            title: 'Fechas',
                            tabConfig: {
                                xtype: 'tab',
                                width: 120
                            },
                            items: [
                                {
                                    xtype: 'fieldset',
                                    id: 'fieldsetFechasMovimientos',
                                    itemId: 'fieldsetFechasMovimientos',
                                    layout: 'column',
                                    title: '<b>Fechas Movimientos</b>',
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            columnWidth: 0.25,
                                            disabledCls: 'disabledField',
                                            id: 'tfUsuarioImplantacion',
                                            itemId: 'tfUsuarioImplantacion',
                                            margin: '0 3 3 0',
                                            fieldLabel: 'Implantación'
                                        },
                                        {
                                            xtype: 'textfield',
                                            columnWidth: 0.3,
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'tfUsuarioNombreImplantacion',
                                            itemId: 'tfUsuarioNombreImplantacion',
                                            margin: '0 3 3 0'
                                        },
                                        {
                                            xtype: 'datefield',
                                            columnWidth: 0.25,
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'dfFechaImplantacion',
                                            itemId: 'dfFechaImplantacion',
                                            margin: '0 3 3 10',
                                            fieldLabel: 'Fecha'
                                        },
                                        {
                                            xtype: 'textfield',
                                            columnWidth: 0.25,
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'tfUsuarioActualizacion',
                                            itemId: 'tfUsuarioActualizacion',
                                            margin: '0 3 3 0',
                                            fieldLabel: 'Actualización'
                                        },
                                        {
                                            xtype: 'textfield',
                                            columnWidth: 0.3,
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'tfUsuarioNombreActualizacion',
                                            itemId: 'tfUsuarioNombreActualizacion',
                                            margin: '0 3 3 0'
                                        },
                                        {
                                            xtype: 'datefield',
                                            columnWidth: 0.25,
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'dfFechaActualizacion',
                                            itemId: 'dfFechaActualizacion',
                                            margin: '0 3 3 10',
                                            fieldLabel: 'Fecha'
                                        },
                                        {
                                            xtype: 'textfield',
                                            columnWidth: 0.25,
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'tfUsuarioCancelacion',
                                            itemId: 'tfUsuarioCancelacion',
                                            margin: '0 3 3 0',
                                            fieldLabel: 'Cancelación'
                                        },
                                        {
                                            xtype: 'textfield',
                                            columnWidth: 0.3,
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'tfUsuarioNombreCancelacion',
                                            itemId: 'tfUsuarioNombreCancelacion',
                                            margin: '0 3 3 0'
                                        },
                                        {
                                            xtype: 'datefield',
                                            columnWidth: 0.25,
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'dfFechaCancelacion',
                                            itemId: 'dfFechaCancelacion',
                                            margin: '0 3 3 10',
                                            fieldLabel: 'Fecha'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            height: 130,
                            layout: 'column',
                            bodyCls: 'formBackground',
                            title: 'Integración',
                            tabConfig: {
                                xtype: 'tab',
                                width: 120
                            },
                            items: [
                                {
                                    xtype: 'fieldset',
                                    columnWidth: 0.5,
                                    id: 'fieldsetPedidoERP',
                                    itemId: 'fieldsetPedidoERP',
                                    layout: 'column',
                                    title: '<b>Integración de Pedido en ERP</b>',
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            id: 'tfIntegracionNumPedidoErp',
                                            itemId: 'tfIntegracionNumPedidoErp',
                                            margin: '0 5 5 0',
                                            fieldLabel: 'Pedido ERP'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldset',
                                    columnWidth: 0.5,
                                    margin: '0 0 0 5',
                                    title: '<b>Factura en ERP</b>',
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            id: 'dfIntegracionFacturaFecha',
                                            itemId: 'dfIntegracionFacturaFecha',
                                            margin: '0 5 5 0',
                                            fieldLabel: 'Fecha'
                                        },
                                        {
                                            xtype: 'textfield',
                                            id: 'tfIntegracionFacturaSerie',
                                            itemId: 'tfIntegracionFacturaSerie',
                                            margin: '0 5 5 0',
                                            fieldLabel: 'Serie'
                                        },
                                        {
                                            xtype: 'textfield',
                                            id: 'tfIntegracionFacturaFolio',
                                            itemId: 'tfIntegracionFacturaFolio',
                                            margin: '0 5 5 0',
                                            fieldLabel: 'Folio'
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'tabpanel',
                    id: 'tabPanelPedidoVentaGrids',
                    itemId: 'tabPanelPedidoVentaGrids',
                    bodyCls: 'formBackground',
                    activeTab: 0,
                    items: [
                        {
                            xtype: 'panel',
                            height: 260,
                            layout: 'column',
                            bodyCls: 'formBackground',
                            title: 'Unidades',
                            tabConfig: {
                                xtype: 'tab',
                                width: 130
                            },
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    columnWidth: 1,
                                    height: 230,
                                    id: 'gridPedidoVentaLinea',
                                    itemId: 'gridPedidoVentaLinea',
                                    forceFit: false,
                                    store: 'storePedidoVentaLinea',
                                    dockedItems: [
                                        {
                                            xtype: 'pagingtoolbar',
                                            dock: 'bottom',
                                            width: 360,
                                            displayInfo: true,
                                            store: 'storePedidoVentaLinea'
                                        }
                                    ],
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            width: 50,
                                            dataIndex: 'num_partida',
                                            text: 'Ptda.'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'estado_unidad',
                                            text: 'Estado'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'codigo',
                                            text: 'Codigo'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'marca',
                                            text: 'Marca'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'modelo',
                                            text: 'Modelo'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            width: 60,
                                            dataIndex: 'cantidad',
                                            text: 'Cantidad'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'ann_unidad',
                                            text: 'Año'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                var valorRetorno = Ext.util.Format.number(value, '0,000.00');
                                                return valorRetorno;
                                            },
                                            align: 'right',
                                            dataIndex: 'valor_unitario',
                                            text: 'Valor Unitario'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                var valorRetorno = Ext.util.Format.number(value, '0,000.00');
                                                return valorRetorno;
                                            },
                                            align: 'right',
                                            dataIndex: 'valor_impuestos',
                                            text: 'Valor Impuestos'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                var valorRetorno = Ext.util.Format.number(value, '0,000.00');
                                                return valorRetorno;
                                            },
                                            align: 'right',
                                            dataIndex: 'valor_partida',
                                            text: 'Valor Partida'
                                        }
                                    ],
                                    listeners: {
                                        itemclick: 'onGridPedidoVentaLineaItemClick',
                                        itemdblclick: 'onGridPedidoVentaLineaItemDblClick'
                                    }
                                },
                                {
                                    xtype: 'fieldset',
                                    columnWidth: 0.65,
                                    border: 0,
                                    id: 'fieldsetBotonesLinea',
                                    itemId: 'fieldsetBotonesLinea',
                                    layout: 'column',
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            id: 'tfInsertarCodigo',
                                            itemId: 'tfInsertarCodigo',
                                            margin: '3 0 5 10',
                                            maxWidth: 220,
                                            fieldLabel: 'Codigo',
                                            labelWidth: 90
                                        },
                                        {
                                            xtype: 'button',
                                            cls: 'botonZoomWindow',
                                            id: 'btnZoomBuscaVin',
                                            itemId: 'btnZoomBuscaVin',
                                            margin: '3 5 5 0',
                                            width: 32,
                                            iconCls: 'fa fa-search icon16 iconColorWhite',
                                            listeners: {
                                                click: 'onBtnZoomBuscaVinClick'
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            cls: 'botonZoomWindow',
                                            id: 'btnAgregarUnidad',
                                            itemId: 'btnAgregarUnidad',
                                            margin: '3 5 5 0',
                                            width: 130,
                                            iconCls: 'fa fa-plus icon16 iconColorWhite',
                                            text: 'Agregar',
                                            textAlign: 'left',
                                            listeners: {
                                                click: 'onBtnAgregarUnidadClick'
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            cls: 'botonZoomWindow',
                                            id: 'btnEliminarUnidad',
                                            itemId: 'btnEliminarUnidad',
                                            margin: '3 5 5 0',
                                            width: 130,
                                            iconCls: 'fa fa-trash icon16 iconColorWhite',
                                            text: 'Eliminar',
                                            textAlign: 'left',
                                            listeners: {
                                                click: 'onBtnEliminarActualizarClick'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldset',
                                    columnWidth: 0.3,
                                    border: 0,
                                    id: 'fieldsetEntregaUnidad',
                                    itemId: 'fieldsetEntregaUnidad',
                                    width: 100,
                                    items: [
                                        {
                                            xtype: 'button',
                                            cls: 'botonZoomWindow',
                                            id: 'btnEntregarUnidad',
                                            itemId: 'btnEntregarUnidad',
                                            margin: '3 5 5 0',
                                            width: 130,
                                            iconCls: 'fa fa-truck icon16 iconColorWhite',
                                            text: 'Entregar',
                                            textAlign: 'left',
                                            listeners: {
                                                click: 'onBtnEliminarActualizarClick1'
                                            }
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            height: 260,
                            layout: 'column',
                            bodyCls: 'formBackground',
                            title: 'Cargos al Cliente',
                            tabConfig: {
                                xtype: 'tab',
                                width: 130
                            },
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    columnWidth: 1,
                                    reference: 'gridPedidoVentaAdicional',
                                    height: 200,
                                    id: 'gridPedidoVentaAdicional',
                                    itemId: 'gridPedidoVentaAdicional',
                                    forceFit: true,
                                    store: 'storePedidoVentaAdicional',
                                    dockedItems: [
                                        {
                                            xtype: 'pagingtoolbar',
                                            dock: 'bottom',
                                            width: 360,
                                            displayInfo: true,
                                            store: 'storePedidoVentaAdicional'
                                        }
                                    ],
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            width: 250,
                                            dataIndex: 'descripcion',
                                            text: 'Descripcion'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            width: 80,
                                            dataIndex: 'codigo_proveedor',
                                            text: 'Proveedor'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            width: 200,
                                            dataIndex: 'nombre_proveedor',
                                            text: 'Nombre'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                var valorRetorno = Ext.util.Format.number(value, '0,000.00');
                                                return valorRetorno;
                                            },
                                            align: 'right',
                                            dataIndex: 'servicio_con_cargo_cliente',
                                            text: 'Con Cargo'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                var valorRetorno = Ext.util.Format.number(value, '0,000.00');
                                                return valorRetorno;
                                            },
                                            align: 'right',
                                            dataIndex: 'servicio_sin_cargo_cliente',
                                            text: 'Sin Cargo'
                                        }
                                    ],
                                    listeners: {
                                        itemclick: 'onGridPedidoVentaAdicionalItemClick'
                                    }
                                },
                                {
                                    xtype: 'fieldset',
                                    columnWidth: 1,
                                    border: 0,
                                    id: 'fieldsetBotonesAdicionales',
                                    itemId: 'fieldsetBotonesAdicionales',
                                    layout: 'column',
                                    items: [
                                        {
                                            xtype: 'fieldset',
                                            columnWidth: 0.7,
                                            border: 0,
                                            id: 'fieldsetCamposAdicionales',
                                            itemId: 'fieldsetCamposAdicionales',
                                            layout: 'column',
                                            items: [
                                                {
                                                    xtype: 'textfield',
                                                    columnWidth: 0.48,
                                                    id: 'tfInsertarAdicional',
                                                    itemId: 'tfInsertarAdicional',
                                                    margin: '3 0 5 10',
                                                    fieldLabel: 'Adicional',
                                                    labelWidth: 90
                                                },
                                                {
                                                    xtype: 'combobox',
                                                    columnWidth: 0.48,
                                                    id: 'cbxProveedor',
                                                    itemId: 'cbxProveedor',
                                                    margin: '3 0 5 10',
                                                    maxWidth: 350,
                                                    fieldLabel: 'Proveedor',
                                                    labelWidth: 90,
                                                    editable: false,
                                                    displayField: 'razon_social',
                                                    queryMode: 'local',
                                                    store: 'storeProveedor',
                                                    valueField: 'codigo_proveedor'
                                                },
                                                {
                                                    xtype: 'textfield',
                                                    columnWidth: 0.48,
                                                    id: 'tfInsertarConCargoCliente',
                                                    itemId: 'tfInsertarConCargoCliente',
                                                    margin: '0 0 5 10',
                                                    fieldLabel: 'Con Cargo',
                                                    labelWidth: 90
                                                },
                                                {
                                                    xtype: 'textfield',
                                                    columnWidth: 0.48,
                                                    id: 'tfInsertarSinCargoCliente',
                                                    itemId: 'tfInsertarSinCargoCliente',
                                                    margin: '0 0 5 10',
                                                    fieldLabel: 'Sin Cargo',
                                                    labelWidth: 90
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'fieldset',
                                            columnWidth: 0.2,
                                            border: 0,
                                            id: 'fieldsetAccionesAdicionales',
                                            itemId: 'fieldsetAccionesAdicionales',
                                            layout: 'column',
                                            items: [
                                                {
                                                    xtype: 'button',
                                                    columnWidth: 1,
                                                    cls: 'botonZoomWindow',
                                                    id: 'btnAgregarAdicional',
                                                    itemId: 'btnAgregarAdicional',
                                                    margin: '3 5 5 0',
                                                    maxWidth: 130,
                                                    minWidth: 130,
                                                    width: 130,
                                                    iconCls: 'fa fa-plus icon16 iconColorWhite',
                                                    text: 'Agregar',
                                                    textAlign: 'left',
                                                    listeners: {
                                                        click: 'onBtnAgregarAdicionalClick'
                                                    }
                                                },
                                                {
                                                    xtype: 'button',
                                                    columnWidth: 1,
                                                    cls: 'botonZoomWindow',
                                                    id: 'btnEliminarActualizar1',
                                                    itemId: 'btnEliminarActualizar',
                                                    margin: '0 5 5 0',
                                                    maxWidth: 130,
                                                    width: 130,
                                                    iconCls: 'fa fa-trash icon16 iconColorWhite',
                                                    text: 'Eliminar',
                                                    textAlign: 'left',
                                                    listeners: {
                                                        click: 'onBtnEliminarActualizar1Click'
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'fieldset',
                    border: 0,
                    id: 'fieldsetValoresPedido',
                    itemId: 'fieldsetValoresPedido',
                    margin: '0 0 -17 0',
                    layout: 'column',
                    items: [
                        {
                            xtype: 'fieldset',
                            columnWidth: 0.65,
                            border: 0,
                            layout: 'column',
                            items: [
                                {
                                    xtype: 'fieldset',
                                    columnWidth: 0.5,
                                    id: 'fieldsetCargosAlCliente',
                                    itemId: 'fieldsetCargosAlCliente',
                                    margin: '0 5 5 0',
                                    layout: 'column',
                                    title: '<b>Cargos al Cliente (con Impuestos)</b>',
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            columnWidth: 1,
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'tfValorConCargoCliente',
                                            itemId: 'tfValorConCargoCliente',
                                            margin: '0 3 2 0',
                                            fieldLabel: 'Con Cargo',
                                            fieldCls: 'formatDecimal'
                                        },
                                        {
                                            xtype: 'textfield',
                                            columnWidth: 1,
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'tfValorSinCargoCliente',
                                            itemId: 'tfValorSinCargoCliente',
                                            margin: '0 3 2 0',
                                            fieldLabel: 'Sin Cargo',
                                            fieldCls: 'formatDecimal'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldset',
                                    columnWidth: 0.5,
                                    id: 'fieldsetSubtotales',
                                    itemId: 'fieldsetSubtotales',
                                    margin: '0 5 5 0',
                                    layout: 'column',
                                    title: '<b>Subtotales</b>',
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            columnWidth: 1,
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'tfCantidadUnidades',
                                            itemId: 'tfCantidadUnidades',
                                            margin: '0 3 3 0',
                                            fieldLabel: 'Unidades',
                                            labelWidth: 120,
                                            fieldCls: 'formatInteger'
                                        },
                                        {
                                            xtype: 'textfield',
                                            columnWidth: 1,
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'tfValorSubtotalUnidades',
                                            itemId: 'tfValorSubtotalUnidades',
                                            margin: '0 3 3 0',
                                            fieldLabel: 'Valor Unidades',
                                            labelWidth: 120,
                                            fieldCls: 'formatDecimal'
                                        },
                                        {
                                            xtype: 'textfield',
                                            columnWidth: 1,
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'tfValorSubtotalAdicionales',
                                            itemId: 'tfValorSubtotalAdicionales',
                                            margin: '0 3 3 0',
                                            fieldLabel: 'Cargos Adicionales',
                                            labelWidth: 120,
                                            fieldCls: 'formatDecimal'
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'fieldset',
                            columnWidth: 0.35,
                            border: 0,
                            layout: 'column',
                            items: [
                                {
                                    xtype: 'fieldset',
                                    columnWidth: 1,
                                    id: 'fieldsetValores',
                                    itemId: 'fieldsetValores',
                                    margin: '0 5 5 0',
                                    layout: 'column',
                                    title: '<b>Valores</b>',
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            columnWidth: 1,
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'tfValorSubtotal',
                                            itemId: 'tfValorSubtotal',
                                            margin: '0 3 3 0',
                                            fieldLabel: 'Subtotal',
                                            labelWidth: 120,
                                            fieldCls: 'formatDecimal'
                                        },
                                        {
                                            xtype: 'textfield',
                                            columnWidth: 1,
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'tfValorImpuesto',
                                            itemId: 'tfValorImpuesto',
                                            margin: '0 3 3 0',
                                            fieldLabel: 'Impuestos',
                                            labelWidth: 120,
                                            fieldCls: 'formatDecimal'
                                        },
                                        {
                                            xtype: 'textfield',
                                            columnWidth: 1,
                                            disabled: true,
                                            disabledCls: 'disabledField',
                                            id: 'tfValorTotal',
                                            itemId: 'tfValorTotal',
                                            margin: '0 3 3 0',
                                            fieldLabel: 'Total',
                                            labelWidth: 120,
                                            fieldCls: 'formatDecimal'
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ],

    onBtnGuardarPedidoVentaClick: function(button, e, eOpts) {
        Ext.getCmp('formPedidoVenta').guardarPedidoVenta();
    },

    onBtnConfirmarPedidoVentaClick: function(button, e, eOpts) {
        Ext.getCmp('formPedidoVenta').confirmarPedidoVenta();
    },

    onBtnAsignarPedidoVentaClick: function(button, e, eOpts) {
        Ext.getCmp('formPedidoVenta').asignarPedidoVenta();
    },

    onBtnDesasignarPedidoVentaClick: function(button, e, eOpts) {
        Ext.getCmp('formPedidoVenta').desasignarPedidoVenta();
    },

    onBtnFacturarPedidoVentaClick: function(button, e, eOpts) {
        elf.openWindow('winFactura');
        elf.writeElement('tfNumPedidoIntegra',elf.readElement('tfNumPedido'));
        elf.writeElement('tfIntegraNumPedidoErp',elf.readElement('tfIntegracionNumPedidoErp'));
        elf.writeElement('dfIntegraFacturaFecha',elf.readElement('dfIntegracionFacturaFecha'));
        elf.writeElement('tfIntegraFacturaSerie',elf.readElement('tfIntegracionFacturaSerie'));
        elf.writeElement('tfIntegraFacturaFolio',elf.readElement('tfIntegracionFacturaFolio'));
    },

    onBtnDesasignarPedidoVentaClick1: function(button, e, eOpts) {
        Ext.getCmp('formPedidoVenta').desligarPedidoVenta();
    },

    onBtnConfirmarPedidoVentaClick1111: function(button, e, eOpts) {
        Ext.getCmp('formPedidoVenta').cancelarPedidoVenta();
    },

    onBtnImprimirPedidoVentaClick: function(button, e, eOpts) {
        Ext.getCmp('formPedidoVenta').imprimirPedidoVenta();
    },

    onBtnCerrarPedidoVentaClick: function(button, e, eOpts) {
        elf.closeWindow('winPedidoVenta');
        elf.refreshGrid('gridPedidoVenta');
    },

    onBtnZoomClienteClick: function(button, e, eOpts) {
        elf.openWindow('winBuscaCliente');
        elf.refreshGrid('gridBuscaCliente');
    },

    onCbxCodigoConsecionarioChange: function(field, newValue, oldValue, eOpts) {
        var arrayCombos = new Array();
        var objConfig   = new Object();
        objConfig.id           = 'CodigoSucursal';
        objConfig.fieldValue   = 'codigo_sucursal';
        objConfig.fieldDisplay = 'descripcion';
        objConfig.filterField  = 'codigo_consecionario';
        objConfig.filterValue  = newValue;

        console.warn('¡Cambio el Combo de consecionario');

        arrayCombos.push(objConfig);
        arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaCombosConfig);
    },

    onCbxCodigoConsecionarioEntregaChange: function(field, newValue, oldValue, eOpts) {
        var arrayCombos = new Array();
        var objConfig   = new Object();
        objConfig.id           = 'CodigoSucursalEntrega';
        objConfig.fieldValue   = 'codigo_sucursal';
        objConfig.fieldDisplay = 'descripcion';
        objConfig.filterField  = 'codigo_consecionario';
        objConfig.filterValue  = newValue;

        console.warn('¡Cambio el Combo de consecionario Entrega');

        arrayCombos.push(objConfig);
        arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaCombosConfig);
    },

    onGridPedidoVentaLineaItemClick: function(dataview, record, item, index, e, eOpts) {
        var gridPedidoVentaLinea = Ext.getCmp('gridPedidoVentaLinea');
        gridPedidoVentaLinea.recordActivo = record.data;
    },

    onGridPedidoVentaLineaItemDblClick: function(dataview, record, item, index, e, eOpts) {

    },

    onBtnZoomBuscaVinClick: function(button, e, eOpts) {
        elf.openWindow('winBuscaVin');

        var arrayCombos = new Array();
        arrayCombos.push('FiltroModelo');
        arrayCombos.push('FiltroMarca');
        arrayCombos.forEach(elf.loadCombos);
        elf.refreshGrid('gridBuscaVin');
    },

    onBtnAgregarUnidadClick: function(button, e, eOpts) {
        Ext.getCmp('formPedidoVenta').agregarUnidad();
    },

    onBtnEliminarActualizarClick: function(button, e, eOpts) {
        Ext.getCmp('formPedidoVenta').eliminarUnidad();
    },

    onBtnEliminarActualizarClick1: function(button, e, eOpts) {
        Ext.getCmp('formPedidoVenta').entregarUnidad();
    },

    onGridPedidoVentaAdicionalItemClick: function(dataview, record, item, index, e, eOpts) {
        var gridPedidoVentaAdicional = Ext.getCmp('gridPedidoVentaAdicional');
        gridPedidoVentaAdicional.recordActivo = record.data;
    },

    onBtnAgregarAdicionalClick: function(button, e, eOpts) {
        Ext.getCmp('formPedidoVenta').agregarAdicional();
    },

    onBtnEliminarActualizar1Click: function(button, e, eOpts) {
        Ext.getCmp('formPedidoVenta').eliminarAdicional();
    }

});