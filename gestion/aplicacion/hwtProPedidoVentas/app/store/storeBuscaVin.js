/*
 * File: app/store/storeBuscaVin.js
 *
 * This file was generated by Sencha Architect version 4.1.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('hwtProPedidoVentas.store.storeBuscaVin', {
    extend: 'Ext.data.Store',

    requires: [
        'hwtProPedidoVentas.model.modelBuscaVin',
        'Ext.data.proxy.Rest',
        'Ext.data.reader.Json'
    ],

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            pageSize: 250,
            storeId: 'storeBuscaVin',
            model: 'hwtProPedidoVentas.model.modelBuscaVin',
            proxy: {
                type: 'rest',
                reader: {
                    type: 'json',
                    rootProperty: function(data) {
                        var storeBuscaVin = Ext.getStore('storeBuscaVin');
                        var rawData = storeBuscaVin.getProxy().getReader().rawData;
                        return rawData.hwtUnidadUsada;
                    }
                }
            },
            listeners: {
                beforeload: {
                    fn: me.onStoreBeforeLoad,
                    scope: me
                }
            }
        }, cfg)]);
    },

    onStoreBeforeLoad: function(store, operation, eOpts) {
        var objJsonData = new Object();
        objJsonData.page            = store.currentPage;
        objJsonData.start           = (store.currentPage - 1) * store.pageSize;
        objJsonData.limit           = store.pageSize;
        objJsonData.cbxFiltroMarca  = elf.readElement('cbxFiltroMarca');
        objJsonData.cbxFiltroModelo = elf.readElement('cbxFiltroModelo');
        objJsonData.tfBuscaVin      = elf.readElement('tfBuscaVin');

        if(store.filtroEstado !== undefined){
            objJsonData.filtroEstado    = store.filtroEstado;
        }
        else{
            objJsonData.filtroEstado    = 'DISPONIBLE';
        }

        objJsonData.busquedaVin     = 'Si';

        var objJsonRequest = new Object();
        objJsonRequest.apiController = 'apiUnidadUsada';
        objJsonRequest.apiMethod     = 'listaUnidadUsada';
        objJsonRequest.apiData       = JSON.stringify(objJsonData);

        var proxyUnidadUsada         = store.getProxy();
        proxyUnidadUsada.api.read    = elf.setApiDataBridge(objJsonRequest.apiController);
        proxyUnidadUsada.extraParams = objJsonRequest;

    }

});