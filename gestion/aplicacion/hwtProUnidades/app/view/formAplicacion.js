/*
 * File: app/view/formAplicacion.js
 *
 * This file was generated by Sencha Architect version 4.1.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('hwtProUnidades.view.formAplicacion', {
    extend: 'Ext.form.Panel',
    alias: 'widget.formAplicacion',

    requires: [
        'hwtProUnidades.view.formAplicacionViewModel',
        'Ext.button.Button',
        'Ext.toolbar.Separator',
        'Ext.toolbar.Fill',
        'Ext.grid.Panel',
        'Ext.grid.column.Action',
        'Ext.grid.filters.filter.String',
        'Ext.toolbar.Paging',
        'Ext.form.field.ComboBox',
        'Ext.grid.filters.Filters'
    ],

    viewModel: {
        type: 'formaplicacion'
    },
    id: 'formAplicacion',
    itemId: 'formAplicacion',
    layout: 'column',
    bodyCls: 'formBackground',
    bodyPadding: 10,
    defaultListenerScope: true,

    dockedItems: [
        {
            xtype: 'toolbar',
            cls: 'toolbarBackground',
            dock: 'top',
            items: [
                {
                    xtype: 'button',
                    id: 'btnVisualizarRegistro',
                    itemId: 'btnVisualizarRegistro',
                    width: 130,
                    iconCls: 'fa fa-eye icon16 iconColorDarkBlue',
                    text: 'Visualizar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickVisualizarRegistro'
                    }
                },
                {
                    xtype: 'button',
                    formatoBoton: function() {
                        var btnBuscarRegistro = Ext.getCmp('btnBuscarRegistro');
                        if(btnBuscarRegistro.modoBusqueda){
                            btnBuscarRegistro.setText('Mostrar Todo');
                            btnBuscarRegistro.setIconCls('fa fa-list icon16 iconColorOrange');

                            var objBuscaUnidad = new Object();
                            objBuscaUnidad.codigo = elf.readElement('tfBuscaCodigoUnidad');
                            Ext.getCmp('formAplicacion').objBuscaUnidadUsada = objBuscaUnidad;
                            elf.refreshGrid('gridUnidadUsada');
                            elf.closeWindow('winBuscaUnidadUsada');
                        }
                        else{
                            btnBuscarRegistro.setText('Buscar');
                            btnBuscarRegistro.setIconCls('fa fa-search icon16 iconColorDarkBlue');
                            Ext.getCmp('formAplicacion').objBuscaUnidadUsada = undefined;
                            elf.refreshGrid('gridUnidadUsada');
                            btnBuscarRegistro.modoBusqueda = false;

                        }
                    },
                    id: 'btnBuscarRegistro',
                    itemId: 'btnBuscarRegistro',
                    width: 130,
                    iconCls: 'fa fa-search icon16 iconColorDarkBlue',
                    text: 'Buscar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickVisualizarRegistro1'
                    }
                },
                {
                    xtype: 'tbseparator',
                    width: 50
                },
                {
                    xtype: 'button',
                    id: 'btnCrear',
                    itemId: 'btnCrear',
                    width: 130,
                    iconCls: 'fa fa-plus-square icon16 iconColorGreen',
                    text: 'Crear',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickCrear'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnActualizar',
                    itemId: 'btnActualizar',
                    width: 130,
                    iconCls: 'fa fa-pencil-square icon16 iconColorGreen',
                    text: 'Actualizar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClick111'
                    }
                },
                {
                    xtype: 'tbseparator',
                    width: 50
                },
                {
                    xtype: 'button',
                    id: 'btnEliminarRegistro',
                    itemId: 'btnEliminarRegistro',
                    width: 130,
                    iconCls: 'fa fa-trash icon16 iconColorDarkRed',
                    text: 'Eliminar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickEliminarRegistro'
                    }
                },
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    width: 130,
                    iconCls: 'fa fa-th  icon16 iconColorDarkBlue',
                    text: 'Reporte',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    width: 130,
                    iconCls: 'fa fa-external-link-square  icon16 iconColorRed',
                    text: 'Salir',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClick1'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'gridpanel',
            columnWidth: 1,
            reference: 'gridUnidadUsada',
            height: 200,
            id: 'gridUnidadUsada',
            itemId: 'gridUnidadUsada',
            title: 'HWT Unidades Usadas',
            forceFit: false,
            store: 'storeUnidadUsada',
            columns: [
                {
                    xtype: 'actioncolumn',
                    getClass: function(v, metadata, r, rowIndex, colIndex, store) {
                        var recordUnidad = r.data;

                        iconClsRetorno = 'archivo16';
                        return iconClsRetorno;
                    },
                    handler: function(view, rowIndex, colIndex, item, e, record, row) {
                        Ext.getCmp('gridUnidadUsada').recordActivo = record;
                        Ext.getCmp('formAplicacion').hojaEspecificaciones();
                    },
                    width: 30,
                    iconCls: 'archivo16',
                    items: [
                        {

                        }
                    ]
                },
                {
                    xtype: 'gridcolumn',
                    width: 120,
                    dataIndex: 'tipo_unidad',
                    text: 'Tipo',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'codigo',
                    text: 'Codigo',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    width: 120,
                    dataIndex: 'estado_unidad',
                    text: 'Estado Unidad',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'ubicacion',
                    text: 'Ubicacion',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    width: 160,
                    dataIndex: 'vin',
                    text: 'Vin',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'modelo',
                    text: 'Modelo',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'marca',
                    text: 'Marca',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'ann_unidad',
                    text: 'AÃ±o',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'color',
                    text: 'Color',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'motor',
                    text: 'Motor',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'modelo_motor',
                    text: 'Modelo Motor',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'potencia_motor',
                    text: 'Potencia Motor'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'numero_serie',
                    text: 'Numero Serie',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'marca_transmision',
                    text: 'Marca Transmision',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'modelo_transmision',
                    text: 'Modelo Transmision',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'velocidades',
                    text: 'Velocidades'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'traslado',
                    text: 'Traslado',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'relacion_dif',
                    text: 'Relacion Dif'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'eje_delantero',
                    text: 'Eje Delantero'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'eje_trasero',
                    text: 'Eje Trasero'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'kilometraje',
                    text: 'Kilometraje'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'distancia_ejes',
                    text: 'Distancia Ejes'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'tipo_cabina',
                    text: 'Tipo Cabina',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'propietario_anterior',
                    text: 'Propietario Anterior',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'precio_sin_iva',
                    text: 'Precio Sin Iva'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'precio_con_iva',
                    text: 'Precio Con Iva'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'fecha_publicacion',
                    text: 'Fecha Publicacion'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'fecha_venta',
                    text: 'Fecha Venta'
                }
            ],
            dockedItems: [
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    width: 360,
                    displayInfo: true,
                    store: 'storeUnidadUsada',
                    items: [
                        {
                            xtype: 'tbseparator'
                        },
                        {
                            xtype: 'combobox',
                            id: 'cbxFiltroEstado',
                            itemId: 'cbxFiltroEstado',
                            fieldLabel: 'Estado Unidad',
                            editable: false,
                            displayField: 'descripcion',
                            queryMode: 'local',
                            store: 'storeFiltroEstado',
                            valueField: 'descripcion',
                            listeners: {
                                change: 'onCbxFiltroEstadoChange'
                            }
                        }
                    ]
                }
            ],
            listeners: {
                itemclick: 'onGridUnidadUsadaItemClick',
                itemdblclick: 'onGridUnidadUsadaItemDblClick'
            },
            plugins: [
                {
                    ptype: 'gridfilters'
                }
            ]
        }
    ],

    onButtonClickVisualizarRegistro: function(button, e, eOpts) {
        Ext.getCmp('formAplicacion').presentaRegistro('visualizar');

    },

    onButtonClickVisualizarRegistro1: function(button, e, eOpts) {
        var btnBuscarRegistro = Ext.getCmp('btnBuscarRegistro');

        console.log('btnBuscarRegistro.modoBusqueda');
        console.log(btnBuscarRegistro.modoBusqueda);

        if(btnBuscarRegistro.modoBusqueda === undefined || btnBuscarRegistro.modoBusqueda === false){
            elf.openWindow('winBuscaUnidadUsada');
        }
        else{
            btnBuscarRegistro.modoBusqueda = false;
            btnBuscarRegistro.formatoBoton();
        }



    },

    onButtonClickCrear: function(button, e, eOpts) {
        elf.openWindow('winUnidadUsada');
        Ext.getCmp('formAplicacion').cargaOpciones();

        var fechaActual = new Date();
        elf.writeElement('tfFechaPublicacion',fechaActual);

    },

    onButtonClick111: function(button, e, eOpts) {

    },

    onButtonClickEliminarRegistro: function(button, e, eOpts) {
        if(Ext.getCmp('formAplicacion').codigoUnidad === undefined){
            msgTipo      = 'error';
            msgTitulo    = 'Eliminar registro de Unidad Usada';
            msgContenido = 'Debe seleccionar un registro vÃ¡lido para realizar Ã©sta operaciÃ³n';
            elf.message(msgTipo,msgTitulo,msgContenido);
            return;
        }

        var msgFuncion = function(){
            var apiController = 'apiUnidadUsada';
            var apiMethod     = 'eliminaUnidadUsada';
            var objJsonData   = new Object();
            objJsonData.codigoUnidad    = Ext.getCmp('formAplicacion').codigoUnidad;

            var objJsonRequest = new Object();
            objJsonRequest.apiController = apiController;
            objJsonRequest.apiMethod     = apiMethod;
            objJsonRequest.apiData       = JSON.stringify(objJsonData);

            var functionSuccess = function(){
                var jsonData = elf.getInfoDataBridge('eliminaUnidadUsada');
                elf.showInfo(jsonData,'information');
                elf.refreshGrid('gridUnidadUsada');
            };

            var functionFailure = function(){
                var jsonData = elf.getInfoDataBridge('eliminaUnidadUsada');

                elf.showInfo(jsonData,'error');
            };


            elf.doDataBridge(objJsonRequest,
                             functionSuccess,
                             null,
                             functionFailure,
                             null);

        };
        msgTipo      = 'question';
        msgTitulo    = 'Eliminar registro de Unidad Usada';
        msgContenido = 'Desea eliminar la Unidad Usada con Codigo: ' + Ext.getCmp('formAplicacion').codigoUnidad + '?';

        elf.message(msgTipo,msgTitulo,msgContenido,msgFuncion);
    },

    onButtonClick: function(button, e, eOpts) {
        var apiController = 'apiUnidadUsada';
        var apiMethod     = 'reporteUnidadUsada';
        var objJsonData   = new Object();
        objJsonData.filtroEstado  = elf.readElement('cbxFiltroEstado');

        var objJsonRequest = new Object();
        objJsonRequest.apiController = apiController;
        objJsonRequest.apiMethod     = apiMethod;
        objJsonRequest.apiData       = JSON.stringify(objJsonData);


        var functionSuccess = function(){
            var jsonData = elf.getInfoDataBridge('reporteUnidadUsada');

            var archivoGenerado = elf.getGeneratedFile(jsonData.archivoGenerado.nombre);
            window.open(archivoGenerado);

            console.warn(archivoGenerado);


            //elf.showInfo(jsonData,'information');
            //elf.refreshGrid('gridUnidadUsada');
        };

        var functionFailure = function(){
            var jsonData = elf.getInfoDataBridge('reporteUnidadUsada');

            elf.showInfo(jsonData,'error');
        };


        elf.doDataBridge(objJsonRequest,
                         functionSuccess,
                         null,
                         functionFailure,
                         null);
    },

    onButtonClick1: function(button, e, eOpts) {
        elf.stopApp('hwtProUnidades');
    },

    onCbxFiltroEstadoChange: function(field, newValue, oldValue, eOpts) {
        elf.refreshGrid('gridUnidadUsada');
    },

    onGridUnidadUsadaItemClick: function(dataview, record, item, index, e, eOpts) {
        Ext.getCmp('formAplicacion').codigoUnidad  = record.data.codigo;
        Ext.getCmp('gridUnidadUsada').recordActivo = record;
    },

    onGridUnidadUsadaItemDblClick: function(dataview, record, item, index, e, eOpts) {
        Ext.getCmp('formAplicacion').presentaRegistro('editar');
    },

    presentaRegistro: function(pEstado) {
        var apiController = 'apiUnidadUsada';
        var apiMethod     = 'datosUnidadUsada';
        var objJsonData   = new Object();
        objJsonData.codigoUnidad    = Ext.getCmp('formAplicacion').codigoUnidad;

        var objJsonRequest = new Object();
        objJsonRequest.apiController = apiController;
        objJsonRequest.apiMethod     = apiMethod;
        objJsonRequest.apiData       = JSON.stringify(objJsonData);

        var functionSuccess = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);

            var pModo = '';
            if(pEstado === 'editar'){
                pModo = 'edit';
            }

            elf.openWindow('winUnidadUsada');

            //ECRC: FunciÃ³n que se ejecuta despuÃ©s de que se carguen las Opciones
            var funcionCarga = function(){
                var jsonData = elf.getInfoDataBridge('datosUnidadUsada');
                elf.showRecord(jsonData,'hwtUnidadUsada',pModo);
            };

            //ECRC: DespuÃ©s de que cargue las Opciones desplegarÃ¡ el Registro
            Ext.getCmp('formAplicacion').cargaOpciones(funcionCarga);

        };

        var functionFailure = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);
        };

        elf.doDataBridge(objJsonRequest,
                         functionSuccess,
                         null,
                         functionFailure,
                         null);
    },

    cargaOpciones: function(pFuncionCarga) {
        var arrayCombos = new Array();
        arrayCombos.push('EstadoUnidad');
        arrayCombos.push('TipoUnidad');
        arrayCombos.push('Ubicacion');
        arrayCombos.push('Modelo');
        arrayCombos.push('Marca');
        arrayCombos.push('Color');
        arrayCombos.push('Motor');
        arrayCombos.push('ModeloMotor');
        arrayCombos.push('PotenciaMotor');
        arrayCombos.push('CabinaDormitorio');
        arrayCombos.push('DistanciaEjes');
        arrayCombos.push('MarcaTransmision');
        arrayCombos.push('ModeloTransmision');
        arrayCombos.push('Velocidades');
        arrayCombos.push('TipoTransmision');
        arrayCombos.push('Suspension');
        arrayCombos.push('EjeDelanteroMarca');
        arrayCombos.push('EjeDelanteroCapacidad');
        arrayCombos.push('EjeTraseroMarca');
        arrayCombos.push('EjeTraseroCapacidad');
        arrayCombos.push('TercerEje');
        arrayCombos.push('RelacionDif');
        arrayCombos.push('DireccionHidraulica');
        arrayCombos.push('MotorFreno');
        arrayCombos.push('AireAcondicionado');
        arrayCombos.push('CombustibleTipo');
        arrayCombos.push('FaldonesChasis');
        arrayCombos.push('CopeteDeflector');
        arrayCombos.push('ExtensionesLaterales');
        arrayCombos.push('TipoCabina');
        arrayCombos.push('ViceraExterior');
        arrayCombos.push('QuintaRueda');
        arrayCombos.push('LlantasDelanterasMedidas');
        arrayCombos.push('LlantasTraserasMedidas');
        arrayCombos.push('Chasis');
        arrayCombos.push('CabinaTipoInterior');
        arrayCombos.push('CabinaTipoVestidura');
        arrayCombos.push('CabinaTipoAsientoOperador');
        arrayCombos.push('CabinaTipoAsientoCopiloto');
        arrayCombos.push('CabinaColorInterior');
        arrayCombos.push('CabinaDobleCama');
        arrayCombos.push('Tanque1Material');
        arrayCombos.push('Tanque1Capacidad');
        arrayCombos.push('Tanque2Material');
        arrayCombos.push('Tanque2Capacidad');
        arrayCombos.push('Tanque3Material');
        arrayCombos.push('Tanque3Capacidad');
        arrayCombos.push('Defensa');
        arrayCombos.push('SistemaEscape');
        arrayCombos.push('RinesDelanteros');
        arrayCombos.push('RinesTraseros');
        arrayCombos.push('TomaFuerza');
        arrayCombos.push('Espejos');
        arrayCombos.push('SistemaHidraulico');
        arrayCombos.push('PinturaNueva');
        arrayCombos.push('TamanoUnidad');
        arrayCombos.push('EjeTraseroTipo');
        arrayCombos.push('RadioInstalado');
        arrayCombos.push('Frenos');

        arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaCombo);

        if(pFuncionCarga){
            pFuncionCarga();
        }

    },

    cargaCombo: function(element, index, array) {
        var jsonData = elf.getInfoDataBridge('datosOpciones');
        var idCombo    = 'cbx' + element;
        var listaCombo = 'opciones' + element;

        if(Ext.getCmp(idCombo) !== undefined){
            elf.setComboBox(idCombo,
                            jsonData,
                            listaCombo,
                            'descripcion',
                            'descripcion');
        }
        else{
            console.warn('cargaOpciones: - No se encontro el ComboBox: ' + idCombo);
        }
    },

    extraeOpciones: function(pFuncionCarga) {
        var apiController = 'apiUnidadUsada';
        var apiMethod     = 'datosOpciones';
        var objJsonData = new Object();
        objJsonData.codigoUnidad    = Ext.getCmp('formAplicacion').codigoUnidad;

        var objJsonRequest = new Object();
        objJsonRequest.apiController = apiController;
        objJsonRequest.apiMethod     = apiMethod;
        objJsonRequest.apiData       = JSON.stringify(objJsonData);

        var functionSuccess = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);

            Ext.getCmp('formAplicacion').filtrosDefecto();
            elf.refreshGrid('gridUnidadUsada');

        };

        var functionFailure = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);
            console.warn('datosOpciones:');
            console.warn(jsonData);
        };

        elf.doDataBridge(objJsonRequest,
                         functionSuccess,
                         null,
                         functionFailure,
                         null);

    },

    filtrosDefecto: function() {
        var arrayCombos = new Array();
        arrayCombos.push('FiltroEstado');
        arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaCombo);
    },

    hojaEspecificaciones: function() {
        var recordUnidadUsada = Ext.getCmp('gridUnidadUsada').recordActivo;

        if(recordUnidadUsada === undefined){
            msgTipo      = 'error';
            msgTitulo    = 'Hoja de Especificaciones de la Unidad';
            msgContenido = 'Debe seleccionar un registro vÃ¡lido para realizar Ã©sta operaciÃ³n';
            elf.message(msgTipo,msgTitulo,msgContenido);
            return;
        }

        var apiController = 'apiUnidadUsada';
        var apiMethod     = 'generaHojaEspecificaciones';
        var objJsonData   = new Object();
        objJsonData.codigoUnidad = recordUnidadUsada.data.codigo;
        objJsonData.vin          = recordUnidadUsada.data.vin;

        var objJsonRequest = new Object();
        objJsonRequest.apiController = apiController;
        objJsonRequest.apiMethod     = apiMethod;
        objJsonRequest.apiData       = JSON.stringify(objJsonData);

        var functionSuccess = function(){
            var jsonData = elf.getInfoDataBridge('generaHojaEspecificaciones');

            console.warn(jsonData);

            var archivoGenerado = elf.getGeneratedFile(jsonData.archivoGenerado.nombre);
            window.open(archivoGenerado);


        };

        var functionFailure = function(){
            var jsonData = elf.getInfoDataBridge('generaHojaEspecificaciones');
            elf.showInfo(jsonData,'error');
        };


        elf.doDataBridge(objJsonRequest,
                         functionSuccess,
                         null,
                         functionFailure,
                         null);
    }

});