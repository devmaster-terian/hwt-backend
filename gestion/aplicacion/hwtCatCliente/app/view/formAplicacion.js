/*
 * File: app/view/formAplicacion.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('hwtCatCliente.view.formAplicacion', {
    extend: 'Ext.form.Panel',
    alias: 'widget.formAplicacion',

    requires: [
        'hwtCatCliente.view.formAplicacionViewModel',
        'Ext.button.Button',
        'Ext.toolbar.Separator',
        'Ext.toolbar.Fill',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.toolbar.Paging',
        'Ext.toolbar.Spacer',
        'Ext.form.field.ComboBox',
        'Ext.grid.column.Column'
    ],

    viewModel: {
        type: 'formaplicacion'
    },
    id: 'formAplicacion',
    itemId: 'formAplicacion',
    bodyCls: 'formBackground',
    bodyPadding: 10,
    defaultListenerScope: true,

    dockedItems: [
        {
            xtype: 'toolbar',
            cls: 'toolbarBackground',
            dock: 'top',
            id: 'toolbarPrincipal',
            itemId: 'toolbarPrincipal',
            items: [
                {
                    xtype: 'button',
                    id: 'btnVisualizar',
                    itemId: 'btnVisualizar',
                    width: 130,
                    iconCls: 'fa fa-eye icon16 iconColorDarkBlue',
                    text: 'Visualizar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickVisualizar'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnBuscar',
                    itemId: 'btnBuscar',
                    width: 130,
                    iconCls: 'fa fa-search icon16 iconColorDarkBlue',
                    text: 'Buscar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickBuscar'
                    }
                },
                {
                    xtype: 'tbseparator',
                    width: 50
                },
                {
                    xtype: 'button',
                    id: 'btnCrear',
                    itemId: 'btnCrear',
                    width: 130,
                    iconCls: 'fa fa-plus-square icon16 iconColorGreen',
                    text: 'Crear',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickCrear'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnActualizar',
                    itemId: 'btnActualizar',
                    width: 130,
                    iconCls: 'fa fa-pencil-square icon16 iconColorGreen',
                    text: 'Actualizar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickActualizar'
                    }
                },
                {
                    xtype: 'tbseparator',
                    width: 50
                },
                {
                    xtype: 'button',
                    id: 'btnEliminar',
                    itemId: 'btnEliminar',
                    width: 130,
                    iconCls: 'fa fa-trash icon16 iconColorDarkRed',
                    text: 'Eliminar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickEliminar'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnReporte',
                    itemId: 'btnReporte',
                    width: 130,
                    iconCls: 'fa fa-th  icon16 iconColorDarkBlue',
                    text: 'Reporte',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickReporte'
                    }
                },
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    id: 'btnSalir',
                    itemId: 'btnSalir',
                    width: 130,
                    iconCls: 'fa fa-external-link-square  icon16 iconColorRed',
                    text: 'Salir',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickSalir'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'gridpanel',
            id: 'gridCliente',
            itemId: 'gridCliente',
            title: 'Clientes',
            store: 'storeCliente',
            dockedItems: [
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    width: 360,
                    displayInfo: true,
                    store: 'storeCliente',
                    items: [
                        {
                            xtype: 'tbspacer',
                            width: 100
                        },
                        {
                            xtype: 'combobox',
                            id: 'cbxGridEstadoCliente',
                            itemId: 'cbxGridEstadoCliente',
                            fieldLabel: 'Estado',
                            labelWidth: 50,
                            editable: false,
                            displayField: 'descripcion',
                            queryMode: 'local',
                            store: 'storeGridEstadoCliente',
                            valueField: 'codigo',
                            listeners: {
                                change: 'onCbxEstadoClienteChange'
                            }
                        }
                    ]
                }
            ],
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 70,
                    dataIndex: 'codigo_cliente',
                    text: 'Codigo</br>Cliente'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'nombre_corto',
                    text: 'Nombre</br>Corto'
                },
                {
                    xtype: 'gridcolumn',
                    width: 250,
                    dataIndex: 'razon_social',
                    text: 'Razon</br>Social'
                },
                {
                    xtype: 'gridcolumn',
                    width: 130,
                    dataIndex: 'rfc',
                    text: 'Rfc'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'contacto_nombre',
                    text: 'Contacto</br>Nombre'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'contacto_telefono',
                    text: 'Contacto</br>Telefono'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'contacto_movil',
                    text: 'Contacto</br>Movil'
                },
                {
                    xtype: 'gridcolumn',
                    width: 190,
                    dataIndex: 'contacto_email',
                    text: 'Contacto</br>Email'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'dir_calle',
                    text: 'Dirección</br>Calle'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'dir_num_interior',
                    text: 'Dirección</br>Num Interior'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'dir_num_exterior',
                    text: 'Dirección</br>Num Exterior'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'dir_colonia',
                    text: 'Dirección</br>Colonia'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'dir_municipio',
                    text: 'Dirección</br>Municipio'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'dir_estado',
                    text: 'Dirección</br>Estado'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'dir_pais',
                    text: 'Dirección</br>Pais'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'codigo_postal',
                    text: 'Dirección</br>Codigo Postal'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'representante_legal',
                    text: 'Representante</br>Legal'
                },
                {
                    xtype: 'gridcolumn',
                    autoShow: true,
                    width: 190,
                    dataIndex: 'facturacion_email',
                    text: 'Facturación</br>Email'
                }
            ],
            listeners: {
                itemclick: 'onGridClienteItemClick',
                itemdblclick: 'onGridClienteItemDblClick'
            }
        }
    ],

    onButtonClickVisualizar: function(button, e, eOpts) {
        Ext.getCmp('formAplicacion').presentaRegistro('visualizar');
    },

    onButtonClickBuscar: function(button, e, eOpts) {
        elf.openWindow('winParametrosBusqueda');
    },

    onButtonClickCrear: function(button, e, eOpts) {
        elf.openWindow('winCliente');
        Ext.getCmp('formCliente').preparaInterfaz();
    },

    onButtonClickActualizar: function(button, e, eOpts) {
        Ext.getCmp('formAplicacion').presentaRegistro('editar');
    },

    onButtonClickEliminar: function(button, e, eOpts) {
        Ext.getCmp('formAplicacion').eliminaRegistro();
    },

    onButtonClickReporte: function(button, e, eOpts) {
        var apiController = 'apiCliente';
        var apiMethod     = 'reporteCliente';
        var objJsonData   = new Object();
        objJsonData.filtroEstadoCliente  = elf.readElement('cbxGridEstadoCliente');

        var objJsonRequest = new Object();
        objJsonRequest.apiController = apiController;
        objJsonRequest.apiMethod     = apiMethod;
        objJsonRequest.apiData       = JSON.stringify(objJsonData);


        var functionSuccess = function(){
            var jsonData = elf.getInfoDataBridge('reporteCliente');

            var archivoGenerado = elf.getGeneratedFile(jsonData.archivoGenerado.nombre);
            window.open(archivoGenerado);
        };

        var functionFailure = function(){
            var jsonData = elf.getInfoDataBridge('reporteCliente');
            elf.showInfo(jsonData,'error');
        };


        elf.doDataBridge(objJsonRequest,
                         functionSuccess,
                         null,
                         functionFailure,
                         null);
    },

    onButtonClickSalir: function(button, e, eOpts) {
        elf.stopApp('hwtCatCliente');
    },

    onCbxEstadoClienteChange: function(field, newValue, oldValue, eOpts) {
        elf.refreshGrid('gridCliente');
    },

    onGridClienteItemClick: function(dataview, record, item, index, e, eOpts) {
        Ext.getCmp('formAplicacion').codigoCliente = record.data.codigo_cliente;
    },

    onGridClienteItemDblClick: function(dataview, record, item, index, e, eOpts) {
        Ext.getCmp('formAplicacion').presentaRegistro('editar');
    },

    extraeOpciones: function() {
        var apiController = 'apiCliente';
        var apiMethod     = 'datosOpciones';
        var objJsonData = new Object();
        objJsonData.codigoUnidad    = Ext.getCmp('formAplicacion').codigoUnidad;

        var objJsonRequest = new Object();
        objJsonRequest.apiController = apiController;
        objJsonRequest.apiMethod     = apiMethod;
        objJsonRequest.apiData       = JSON.stringify(objJsonData);

        var functionSuccess = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);

            Ext.getCmp('formAplicacion').filtrosDefecto();

            elf.refreshGrid('gridCliente');

        };

        var functionFailure = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);
            console.warn('datosOpciones:');
            console.warn(jsonData);
        };

        elf.doDataBridge(objJsonRequest,
                         functionSuccess,
                         null,
                         functionFailure,
                         null);
    },

    presentaRegistro: function(pEstado) {
        var apiController = 'apiCliente';
        var apiMethod     = 'datosCliente';
        var objJsonData   = new Object();
        objJsonData.codigoCliente = Ext.getCmp('formAplicacion').codigoCliente;

        var objJsonRequest = new Object();
        objJsonRequest.apiController = apiController;
        objJsonRequest.apiMethod     = apiMethod;
        objJsonRequest.apiData       = JSON.stringify(objJsonData);

        var functionSuccess = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);

            var pModo = '';
            if(pEstado === 'editar'){
                pModo = 'edit';
            }

            elf.openWindow('winCliente');
            var arrayCombos = new Array();
            arrayCombos.push('EstadoCliente');
            arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaCombo);


            //ECRC: Función que se ejecuta después de que se carguen las Opciones
            var funcionCarga = function(){
                Ext.getCmp('formCliente').estadoRegistro = 'edicion';
                Ext.getCmp('formCliente').preparaInterfaz();

                var jsonData = elf.getInfoDataBridge('datosCliente');
                elf.showRecord(jsonData,'hwtCliente',pModo);
            };

            //ECRC: Después de que cargue las Opciones desplegará el Registro
            Ext.getCmp('formAplicacion').cargaOpciones(funcionCarga);
        };

        var functionFailure = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);
            elf.showInfo(jsonData,
                         'error');
        };

        elf.doDataBridge(objJsonRequest,
                         functionSuccess,
                         null,
                         functionFailure,
                         null);
    },

    filtrosDefecto: function() {
        var arrayCombos = new Array();
        arrayCombos.push('GridEstadoCliente');
        arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaCombo);
    },

    cargaCombo: function(element, index, array) {
        var jsonData = elf.getInfoDataBridge('datosOpciones');
        var idCombo    = 'cbx' + element;
        var listaCombo = 'opciones' + element;

        if(Ext.getCmp(idCombo) !== undefined){
            elf.setComboBox(idCombo,
                            jsonData,
                            listaCombo,
                            'descripcion',
                            'descripcion');
        }
        else{
            console.warn('cargaOpciones: - No se encontro el ComboBox: ' + idCombo);
        }
    },

    cargaOpciones: function(pFuncionCarga) {
        var arrayCombos = new Array();
        arrayCombos.push('EstadoCliente');

        arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaCombo);

        if(pFuncionCarga){
            pFuncionCarga();
        }

    },

    eliminaRegistro: function() {
        if(Ext.getCmp('formAplicacion').codigoCliente === undefined){
            msgTipo      = 'error';
            msgTitulo    = 'Eliminar registro de Cliente';
            msgContenido = 'Debe seleccionar un registro válido para realizar ésta operación';
            elf.message(msgTipo,msgTitulo,msgContenido);
            return;
        }

        var msgFuncion = function(){
            var apiController = 'apiCliente';
            var apiMethod     = 'eliminaCliente';
            var objJsonData   = new Object();
            objJsonData.codigoCliente    = Ext.getCmp('formAplicacion').codigoCliente;

            var objJsonRequest = new Object();
            objJsonRequest.apiController = apiController;
            objJsonRequest.apiMethod     = apiMethod;
            objJsonRequest.apiData       = JSON.stringify(objJsonData);

            var functionSuccess = function(){
                var jsonData = elf.getInfoDataBridge('eliminaCliente');
                elf.showInfo(jsonData,'information');
                elf.refreshGrid('gridCliente');
            };

            var functionFailure = function(){
                var jsonData = elf.getInfoDataBridge('eliminaCliente');
                elf.showInfo(jsonData,'error');
            };


            elf.doDataBridge(objJsonRequest,
                             functionSuccess,
                             null,
                             functionFailure,
                             null);

        };
        msgTipo      = 'question';
        msgTitulo    = 'Eliminar registro de Cliente';
        msgContenido = 'Desea eliminar al Cliente con Codigo: ' + Ext.getCmp('formAplicacion').codigoCliente + '?';

        elf.message(msgTipo,msgTitulo,msgContenido,msgFuncion);
    }

});