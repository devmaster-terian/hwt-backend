/*
 * File: app/view/winReporteCondicion.js
 *
 * This file was generated by Sencha Architect version 4.1.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('hwtProCondicionUnidad.view.winReporteCondicion', {
    extend: 'Ext.window.Window',
    alias: 'widget.winReporteCondicion',

    requires: [
        'hwtProCondicionUnidad.view.winReporteCondicionViewModel',
        'Ext.form.Panel',
        'Ext.form.FieldSet',
        'Ext.form.field.Date',
        'Ext.button.Button',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.toolbar.Paging',
        'Ext.toolbar.Separator',
        'Ext.grid.column.Action',
        'Ext.form.field.ComboBox',
        'Ext.toolbar.Fill'
    ],

    viewModel: {
        type: 'winreportecondicion'
    },
    modal: true,
    height: 510,
    id: 'winReporteCondicion',
    itemId: 'winReporteCondicion',
    width: 1000,
    closable: false,
    title: 'Reporte de Condición de Unidad',
    defaultListenerScope: true,

    items: [
        {
            xtype: 'form',
            muestraReporteCondicionLinea: function(pHwtCondicionUnidadLinea) {
                elf.openWindow('winReporteCondicionLinea');

                var arrayCombos = new Array();
                arrayCombos.push('LineaEstado');
                arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaComboComplejo);

                elf.writeElement('tfLineaNumReporte'             ,pHwtCondicionUnidadLinea.num_reporte);
                elf.writeElement('tfLineaNumSequencia'           ,pHwtCondicionUnidadLinea.num_sequencia);
                elf.writeElement('tfLineaCodSeccion'             ,pHwtCondicionUnidadLinea.cod_seccion);
                elf.writeElement('tfLineaCodCaracteristica'      ,pHwtCondicionUnidadLinea.cod_caracteristica);
                elf.writeElement('tfLineaDescCaracteristica'     ,pHwtCondicionUnidadLinea.desc_caracteristica);
                elf.writeElement('cbxLineaEstado'                ,pHwtCondicionUnidadLinea.estado);
                elf.writeElement('tfLineaValorReferencia'        ,pHwtCondicionUnidadLinea.valor_referencia);
                elf.writeElement('tfLineaObservaciones'          ,pHwtCondicionUnidadLinea.observaciones);
                elf.writeElement('tflineaPrecioUnitarioEstimado' ,pHwtCondicionUnidadLinea.precio_unitario_estimado);
            },
            cambiaEstadoLinea: function() {
                hwtCondicionUnidadLinea       = Ext.getCmp('gridReporteCondicionLinea').recordActivo.data;
                hwtRecordCondicionUnidadLinea = Ext.getCmp('gridReporteCondicionLinea').recordActivo;
                console.warn(hwtCondicionUnidadLinea);

                var apiController          = 'apiCondicionUnidad';
                var apiMethod              = 'cambiaEstadoLinea';
                var objJsonData            = new Object();

                objJsonData.lineaNumReporte   = hwtCondicionUnidadLinea.num_reporte;
                objJsonData.lineaCodSequencia = hwtCondicionUnidadLinea.num_sequencia;
                objJsonData.lineaEstado       = hwtCondicionUnidadLinea.estado;

                var objJsonRequest = new Object();
                objJsonRequest.apiController = apiController;
                objJsonRequest.apiMethod     = apiMethod;
                objJsonRequest.apiData       = JSON.stringify(objJsonData);
                objJsonRequest.noMessage     = true;

                var functionSuccess = function(){
                    var jsonData = elf.getInfoDataBridge(apiMethod);
                    var jsonDatosOpcionesCondicion   = elf.getInfoDataBridge('datosOpcionesCondicion');
                    var opcionesEstadoCaracteristica = jsonDatosOpcionesCondicion.opcionesEstadoCaracteristica;

                    var estadoActual = 0;
                    for(iCiclo=0;iCiclo < Object.keys(opcionesEstadoCaracteristica).length;iCiclo++){
                        if(hwtCondicionUnidadLinea.estado === opcionesEstadoCaracteristica[iCiclo].descripcion){
                            estadoActual = opcionesEstadoCaracteristica[iCiclo].codigo;
                        }
                    }

                    estadoActual = estadoActual + 1;

                    if(estadoActual > Object.keys(opcionesEstadoCaracteristica).length){
                        estadoActual = 1;
                    }

                    descEstadoAsignado = '';
                    for(iCiclo=0;iCiclo < Object.keys(opcionesEstadoCaracteristica).length;iCiclo++){
                        if(estadoActual === opcionesEstadoCaracteristica[iCiclo].codigo){
                            descEstadoAsignado = opcionesEstadoCaracteristica[iCiclo].descripcion;
                        }
                    }

                    hwtRecordCondicionUnidadLinea.data.estado = descEstadoAsignado;
                    Ext.getCmp('gridReporteCondicionLinea').getView().refreshNode(hwtRecordCondicionUnidadLinea);

                    if(descEstadoAsignado === 'REPARAR'){
                        var recordCondicionLinea = hwtCondicionUnidadLinea;
                        Ext.getCmp('formEncabezado').muestraReporteCondicionLinea(recordCondicionLinea);
                    }

                    /*
                    elf.refreshGrid('gridReporteCondicionLinea');
                    Ext.getCmp('formAplicacion').filtrosDefecto();
                    */
                };

                var functionFailure = function(){
                    var jsonData = elf.getInfoDataBridge(apiMethod);
                    console.warn('Success::datosOpciones:');
                    console.warn(jsonData);
                };

                elf.doDataBridge(objJsonRequest,
                functionSuccess,
                null,
                functionFailure,
                null);

            },
            id: 'formEncabezado',
            itemId: 'formEncabezado',
            layout: 'column',
            bodyCls: 'formBackground',
            bodyPadding: 10,
            items: [
                {
                    xtype: 'fieldset',
                    columnWidth: 1,
                    border: 0,
                    margin: '0 0 -5 0',
                    layout: 'column',
                    items: [
                        {
                            xtype: 'fieldset',
                            columnWidth: 0.5,
                            id: 'fieldsetInformacionGeneral',
                            itemId: 'fieldsetInformacionGeneral',
                            layout: 'column',
                            title: '<b>Información General</b>',
                            items: [
                                {
                                    xtype: 'textfield',
                                    columnWidth: 0.5,
                                    disabled: true,
                                    disabledCls: 'disabledField',
                                    id: 'tfNumReporte',
                                    itemId: 'tfNumReporte',
                                    margin: '0 10 5 0',
                                    fieldLabel: 'No. Reporte',
                                    labelWidth: 70
                                },
                                {
                                    xtype: 'datefield',
                                    columnWidth: 0.4,
                                    disabled: true,
                                    disabledCls: 'disabledField',
                                    id: 'dfFechaReporte',
                                    itemId: 'dfFechaReporte',
                                    margin: '0 10 5 0',
                                    fieldLabel: 'Fecha',
                                    labelWidth: 50,
                                    submitFormat: 'Y-m-d'
                                },
                                {
                                    xtype: 'textfield',
                                    columnWidth: 0.5,
                                    disabled: true,
                                    disabledCls: 'disabledField',
                                    id: 'tfUsuario',
                                    itemId: 'tfUsuario',
                                    margin: '0 10 5 0',
                                    fieldLabel: 'Usuario',
                                    labelWidth: 70
                                }
                            ]
                        },
                        {
                            xtype: 'fieldset',
                            columnWidth: 0.3,
                            id: 'fieldsetUnidad',
                            itemId: 'fieldsetUnidad',
                            margin: '0 0 0 5',
                            layout: 'column',
                            title: '<b>Unidad</b>',
                            items: [
                                {
                                    xtype: 'textfield',
                                    columnWidth: 0.85,
                                    disabledCls: 'disabledField',
                                    id: 'tfVin',
                                    itemId: 'tfVin',
                                    margin: '0 0 34 0',
                                    fieldLabel: 'VIN',
                                    labelWidth: 40,
                                    maxLength: 17
                                },
                                {
                                    xtype: 'button',
                                    columnWidth: 0.12,
                                    cls: 'botonZoom',
                                    id: 'btnBuscaVin',
                                    itemId: 'btnBuscaVin',
                                    iconCls: 'fa fa-search-plus icon16 iconColorWhite',
                                    listeners: {
                                        click: 'onBtnBuscaVinClick'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'fieldset',
                            columnWidth: 0.2,
                            id: 'fieldsetAcciones',
                            itemId: 'fieldsetAcciones',
                            margin: '0 0 0 5',
                            layout: 'column',
                            title: '<b>Acciones</b>',
                            items: [
                                {
                                    xtype: 'button',
                                    columnWidth: 1,
                                    cls: 'botonZoomWindow',
                                    id: 'btnGeneraSecciones',
                                    itemId: 'btnGeneraSecciones',
                                    margin: '0 0 5 0',
                                    maxWidth: 150,
                                    iconCls: 'fa fa-check-square icon16 iconColorWhite',
                                    text: 'Genera Secciones',
                                    textAlign: 'left',
                                    listeners: {
                                        click: 'onBtnGeneraSeccionesClick'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    columnWidth: 1,
                                    cls: 'botonZoomWindow',
                                    id: 'btnReporteCondicion',
                                    itemId: 'btnReporteCondicion',
                                    margin: '0 0 5 0',
                                    maxWidth: 150,
                                    iconCls: 'fa fa-file-text icon16 iconColorWhite',
                                    text: 'Reporte',
                                    textAlign: 'left',
                                    listeners: {
                                        click: 'onBtnReporteCondicionClick'
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'gridpanel',
                    columnWidth: 1,
                    height: 290,
                    id: 'gridReporteCondicionLinea',
                    itemId: 'gridReporteCondicionLinea',
                    title: 'Condiciones de la Unidad',
                    forceFit: true,
                    store: 'storeReporteCondicionLinea',
                    viewConfig: {
                        id: 'gridViewReporteCondicionLinea',
                        itemId: 'gridViewReporteCondicionLinea',
                        loadMask: false
                    },
                    dockedItems: [
                        {
                            xtype: 'pagingtoolbar',
                            dock: 'bottom',
                            width: 360,
                            displayInfo: true,
                            store: 'storeReporteCondicionLinea',
                            items: [
                                {
                                    xtype: 'tbseparator',
                                    width: 140
                                },
                                {
                                    xtype: 'button',
                                    cls: 'botonZoomWindow',
                                    id: 'btnAgregarCaracteristica',
                                    itemId: 'btnAgregarCaracteristica',
                                    width: 130,
                                    iconCls: 'fa fa-plus-square icon16 iconColorWhite',
                                    text: '<font color=white>Agregar</font>',
                                    textAlign: 'left',
                                    listeners: {
                                        click: 'onBtnAgregarCaracteristicaClick'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    cls: 'botonZoomWindow',
                                    hidden: true,
                                    id: 'btnEliminarCaracteristica',
                                    itemId: 'btnEliminarCaracteristica',
                                    width: 130,
                                    iconCls: 'fa fa-trash icon16 iconColorWhite',
                                    text: '<font color=white>Eliminar</font>',
                                    textAlign: 'left',
                                    listeners: {
                                        click: 'onBtnEliminarCaracteristicaClick'
                                    }
                                }
                            ]
                        }
                    ],
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            width: 220,
                            dataIndex: 'desc_caracteristica',
                            text: 'Caracteristica'
                        },
                        {
                            xtype: 'actioncolumn',
                            width: 30,
                            dataIndex: 'estado',
                            iconCls: 'fa fa-clock-o icon16 iconColorOrange',
                            items: [
                                {
                                    getClass: function(v, metadata, r, rowIndex, colIndex, store) {
                                        var recordMaquina = r.data;
                                        var iconClsRetorno = '';

                                        console.log('recordMaquina');
                                        console.log(recordMaquina);


                                        switch(recordMaquina.estado){
                                            case 'PENDIENTE' :
                                            iconClsRetorno = 'inspeccion16';
                                            break;
                                            case 'VERIFICADO' :
                                            iconClsRetorno = 'verificado16';
                                            break;
                                            case 'REPARAR' :
                                            iconClsRetorno = 'reparar16';
                                            break;
                                            case 'REPARADO' :
                                            iconClsRetorno = 'reparado16';
                                            break;
                                            default:
                                            console.warn('No se encontró el Estado');
                                        }

                                        console.warn(iconClsRetorno);

                                        return iconClsRetorno;
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'estado',
                            text: 'Estado'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 65,
                            dataIndex: 'valor_referencia',
                            text: 'Valor</br>Referencia'
                        },
                        {
                            xtype: 'actioncolumn',
                            width: 30,
                            dataIndex: 'fotografia',
                            iconCls: 'fa fa-clock-o icon16 iconColorOrange',
                            items: [
                                {
                                    getClass: function(v, metadata, r, rowIndex, colIndex, store) {
                                        var recordCondicion = r.data;
                                        var iconClsRetorno = '';

                                        console.log('recordCondicion.fotografia');
                                        console.log(recordCondicion.fotografia);

                                        if(recordCondicion.fotografia !== null &&
                                        recordCondicion.fotografia !== ''){
                                            iconClsRetorno = 'photo16';
                                        }
                                        else{
                                            iconClsRetorno = 'upload16';
                                        }

                                        console.warn(iconClsRetorno);

                                        return iconClsRetorno;
                                    },
                                    handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                        console.warn('item clicado');
                                        console.warn(record);


                                        Ext.getCmp('gridReporteCondicionLinea').recordActivo = record;

                                        if(record.data.fotografia !== null &&
                                        record.data.fotografia !== ''){


                                            //var archivoDescarga = 'http://' + record.data.fotografia;
                                            var archivoDescarga = record.data.fotografia;

                                            var botonesWindow = new Array();
                                            var winPresentaDoc = Ext.getCmp('winPresentaDoc');


                                            botonesWindow.push({
                                                text: 'Eliminar',
                                                handler: function(){
                                                    console.warn('Eliminar la Imagen');
                                                    var recordCondicionLinea = Ext.getCmp('gridReporteCondicionLinea').recordActivo = record;
                                                    console.warn('recordCondicionLinea');
                                                    console.warn(recordCondicionLinea);

                                                    hwtCondicionUnidadLinea       = Ext.getCmp('gridReporteCondicionLinea').recordActivo.data;
                                                    hwtRecordCondicionUnidadLinea = Ext.getCmp('gridReporteCondicionLinea').recordActivo;
                                                    console.warn(hwtCondicionUnidadLinea);

                                                    var apiController          = 'apiCondicionUnidad';
                                                    var apiMethod              = 'eliminaImagenCondicionLinea';

                                                    var objJsonData               = new Object();
                                                    objJsonData.numReporte        = hwtCondicionUnidadLinea.num_reporte;
                                                    objJsonData.numSequencia      = hwtCondicionUnidadLinea.num_sequencia;
                                                    objJsonData.codSeccion        = hwtCondicionUnidadLinea.cod_seccion;
                                                    objJsonData.codCaracteristica = hwtCondicionUnidadLinea.cod_caracteristica;

                                                    var objJsonRequest = new Object();
                                                    objJsonRequest.apiController = apiController;
                                                    objJsonRequest.apiMethod     = apiMethod;
                                                    objJsonRequest.apiData       = JSON.stringify(objJsonData);
                                                    objJsonRequest.noMessage     = true;

                                                    var functionSuccess = function(){
                                                        var jsonData = elf.getInfoDataBridge(apiMethod);
                                                        var jsonDatosImagen   = elf.getInfoDataBridge('eliminaImagenCondicionLinea');
                                                        var opcionesEstadoCaracteristica = jsonDatosImagen.opcionesEstadoCaracteristica;

                                                        hwtRecordCondicionUnidadLinea.data.fotografia = '';
                                                        Ext.getCmp('gridReporteCondicionLinea').getView().refreshNode(hwtRecordCondicionUnidadLinea);

                                                        winPresentaDocCierra();

                                                        elf.showInfo(jsonData,'information');

                                                    };

                                                    var functionFailure = function(){
                                                        var jsonData = elf.getInfoDataBridge(apiMethod);
                                                        console.warn('Success::datosOpciones:');
                                                        console.warn(jsonData);
                                                    };

                                                    elf.doDataBridge(objJsonRequest,
                                                    functionSuccess,
                                                    null,
                                                    functionFailure,
                                                    null);

                                                },
                                                cls: 'botonZoomWindow',
                                                iconCls: 'fa fa-trash icon16 iconColorWhite',
                                                textAlign: 'left',
                                                width: 100,
                                                margin: '0 70 0 0'
                                            });

                                            botonesWindow.push({
                                                text: 'Descargar',
                                                cls: 'botonZoomWindow',
                                                iconCls: 'fa fa-download icon16 iconColorWhite',
                                                textAlign: 'left',
                                                width: 100,
                                                handler: function(){
                                                    var link = document.createElement('a');
                                                    link.href = archivoDescarga;
                                                    link.download = 'hwtProCondicionUnidad_descarga.jpg';
                                                    document.body.appendChild(link);
                                                    link.click();
                                                }
                                            });

                                            botonesWindow.push({
                                                text: 'Cerrar',
                                                cls: 'botonZoomWindow',
                                                iconCls: 'fa fa-window-close icon16 iconColorWhite',
                                                textAlign: 'left',
                                                width: 100,
                                                handler: function(){
                                                    winPresentaDocCierra();
                                                }
                                            });


                                            if(!winPresentaDoc){
                                                winPresentaDoc = new Ext.Window({
                                                    titlebar: false,
                                                    width : 400,
                                                    height: 500,
                                                    draggable:false,
                                                    closable: false,
                                                    modal: true,
                                                    id: 'winPresentaDoc',
                                                    itemId: 'winPresentaDoc',
                                                    layout : 'fit',
                                                    items : [{
                                                        xtype : "image",
                                                        src : archivoDescarga
                                                    }],
                                                    resizable:{preserveAspectRatio: true},
                                                    buttons:botonesWindow

                                                });
                                            }

                                            winPresentaDocAbre();

                                            function winPresentaDocAbre(){
                                                winPresentaDoc.show();

                                            }

                                            function winPresentaDocCierra(){
                                                winPresentaDoc.close();

                                            }
                                        } //ECRC: Existe información de Fotografía
                                        else{
                                            var objCondicionLinea = record.data;
                                            Ext.getCmp('formEncabezado').muestraReporteCondicionLinea(objCondicionLinea);
                                        } //ECRC: No existe información de Fotografía

                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 260,
                            dataIndex: 'observaciones',
                            text: 'Observaciones'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var valorRetorno = Ext.util.Format.number(value,'0,000.00/i');
                                return valorRetorno;
                            },
                            align: 'right',
                            dataIndex: 'precio_unitario_estimado',
                            text: 'Precio Unitario</br>Estimado'
                        }
                    ],
                    listeners: {
                        itemclick: 'onGridReporteCondicionLineaItemClick',
                        itemdblclick: 'onGridReporteCondicionLineaItemDblClick'
                    }
                },
                {
                    xtype: 'fieldset',
                    columnWidth: 0.6,
                    id: 'fieldsetSeccionUnidad',
                    itemId: 'fieldsetSeccionUnidad',
                    layout: 'column',
                    title: '<b>Sección de la Unidad</b>',
                    items: [
                        {
                            xtype: 'combobox',
                            columnWidth: 1,
                            id: 'cbxOpcionSeccion',
                            itemId: 'cbxOpcionSeccion',
                            margin: '0 10 5 0',
                            fieldLabel: 'Sección',
                            labelWidth: 50,
                            editable: false,
                            displayField: 'descripcion',
                            queryMode: 'local',
                            store: 'storeOpcionSeccion',
                            valueField: 'codigo',
                            listeners: {
                                change: 'onCbxOpcionSeccionChange'
                            }
                        }
                    ]
                },
                {
                    xtype: 'fieldset',
                    columnWidth: 0.4,
                    id: 'fieldsetResumen',
                    itemId: 'fieldsetResumen',
                    margin: '0 0 0 5',
                    layout: 'column',
                    title: '<b>Resumen</b>',
                    items: [
                        {
                            xtype: 'textfield',
                            columnWidth: 0.4,
                            disabled: true,
                            disabledCls: 'disabledField',
                            id: 'tfNumReparaciones',
                            itemId: 'tfNumReparaciones',
                            margin: '0 10 5 0',
                            fieldLabel: 'Reparaciones',
                            labelWidth: 80,
                            fieldCls: 'formatInteger'
                        },
                        {
                            xtype: 'textfield',
                            columnWidth: 0.6,
                            cls: 'formatDecimal',
                            disabled: true,
                            disabledCls: 'disabledField',
                            id: 'tfPrecioTotalEstimado',
                            itemId: 'tfPrecioTotalEstimado',
                            margin: '0 10 5 0',
                            fieldLabel: 'Total Estimado',
                            labelWidth: 90,
                            fieldCls: 'formatDecimal'
                        }
                    ]
                }
            ]
        }
    ],
    dockedItems: [
        {
            xtype: 'toolbar',
            cls: 'toolbarBackground',
            dock: 'bottom',
            id: 'toolbarReporteCondicion',
            itemId: 'toolbarReporteCondicion',
            items: [
                {
                    xtype: 'button',
                    id: 'btnConfirmarReporte',
                    itemId: 'btnConfirmarReporte',
                    width: 130,
                    iconCls: 'fa fa-check-square icon16 iconColorGreen',
                    text: 'Confirmar',
                    textAlign: 'left'
                },
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    id: 'btnReporteCondicionCerrar',
                    itemId: 'btnReporteCondicionCerrar',
                    width: 130,
                    iconCls: 'fa fa-window-close icon16 iconColorRed',
                    text: 'Cerrar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onBtnReporteCondicionCerrarClick'
                    }
                }
            ]
        }
    ],

    onBtnBuscaVinClick: function(button, e, eOpts) {
        elf.openWindow('winBuscaVin');
        var arrayCombos = new Array();
        arrayCombos.push('FiltroModelo');
        arrayCombos.push('FiltroMarca');
        arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaCombo);
        elf.refreshGrid('gridBuscaVin');
    },

    onBtnGeneraSeccionesClick: function(button, e, eOpts) {
        if(elf.readElement('tfVin') === ''){
            msgTipo      = 'error';
            msgTitulo    = 'VIN no informado';
            msgContenido = 'Debe informar el VIN de una Unidad para proceder a generar las Secciones de Condición.';
            elf.message(msgTipo,msgTitulo,msgContenido);
            return;
        }

        var apiController          = 'apiCondicionUnidad';
        var apiMethod              = 'generaSecciones';
        var objJsonData            = new Object();
        objJsonData.tfVin          = elf.readElement('tfVin');
        objJsonData.tfUsuario      = elf.readElement('tfUsuario');
        objJsonData.tfNumReporte   = elf.readElement('tfNumReporte');
        objJsonData.dfFechaReporte = elf.readElement('dfFechaReporte');

        var objJsonRequest = new Object();
        objJsonRequest.apiController = apiController;
        objJsonRequest.apiMethod     = apiMethod;
        objJsonRequest.apiData       = JSON.stringify(objJsonData);

        var functionSuccess = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);
            console.warn('Success::datosOpciones:');
            console.warn(jsonData);

            var hwtReporteCondicion = jsonData.hwtReporteCondicion;
            elf.writeElement('tfNumReporte'  ,hwtReporteCondicion.num_reporte);
            elf.refreshGrid('gridReporteCondicion');

            /*
            var fechaReporte = new Date(hwtReporteCondicion.fecha_reporte  + 'T00:00:00-06:00');
            console.warn('fechaReporte');
            console.warn(fechaReporte);
            */

            elf.writeElement('dfFechaReporte',hwtReporteCondicion.fecha_reporte);

            elf.refreshGrid('gridReporteCondicionLinea');

            /*
            Ext.getCmp('formAplicacion').filtrosDefecto();
            */
        };

        var functionFailure = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);
            console.warn('Success::datosOpciones:');
            console.warn(jsonData);
        };

        elf.doDataBridge(objJsonRequest,
                         functionSuccess,
                         null,
                         functionFailure,
                         null);
    },

    onBtnReporteCondicionClick: function(button, e, eOpts) {
        Ext.getCmp('formAplicacion').reporteCondicionUnidad();
    },

    onBtnAgregarCaracteristicaClick: function(button, e, eOpts) {
        elf.openWindow('winReporteCondicionLinea');
        var arrayCombos = new Array();
        arrayCombos.push('LineaEstado');
        arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaComboComplejo);

        Ext.getCmp('gridReporteCondicionLinea').recordActivo = undefined;

        elf.writeElement('tfLineaNumReporte',elf.readElement('tfNumReporte'));
        elf.writeElement('tfLineaCodSeccion',elf.readElement('cbxOpcionSeccion'));
        elf.enableElement('tfLineaDescCaracteristica');
        elf.enableElement('cbxLineaEstado');

    },

    onBtnEliminarCaracteristicaClick: function(button, e, eOpts) {

        var recordLinea = Ext.getCmp('gridReporteCondicionLinea').recordActivo;

        if(recordLinea === undefined){
            msgTipo      = 'error';
            msgTitulo    = 'Eliminar Condición de Unidad (Línea)';
            msgContenido = 'Debe seleccionar un registro válido para realizar ésta operación';
            elf.message(msgTipo,msgTitulo,msgContenido);
            return;
        }

        var msgFuncion = function(){
            var recordLinea = Ext.getCmp('gridReporteCondicionLinea').recordActivo;

            var apiController = 'apiCondicionUnidad';
            var apiMethod     = 'eliminaCondicionLinea';
            var objJsonData   = new Object();
            objJsonData.rowidLinea    = recordLinea.data.rowid;

            var objJsonRequest = new Object();
            objJsonRequest.apiController = apiController;
            objJsonRequest.apiMethod     = apiMethod;
            objJsonRequest.apiData       = JSON.stringify(objJsonData);

            var functionSuccess = function(){
                var jsonData = elf.getInfoDataBridge('eliminaCondicionLinea');
                elf.showInfo(jsonData,'information');
                elf.refreshGrid('gridReporteCondicionLinea');
            };

            var functionFailure = function(){
                var jsonData = elf.getInfoDataBridge('eliminaCondicionLinea');

                elf.showInfo(jsonData,'error');
            };


            elf.doDataBridge(objJsonRequest,
                             functionSuccess,
                             null,
                             functionFailure,
                             null);

        };
        msgTipo      = 'question';
        msgTitulo    = 'Eliminar Condición de Unidad (Línea)';
        msgContenido = 'Desea eliminar la Condición de Unidad: ' + recordLinea.data.desc_caracteristica + '?';

        elf.message(msgTipo,msgTitulo,msgContenido,msgFuncion);

    },

    onGridReporteCondicionLineaItemClick: function(dataview, record, item, index, e, eOpts) {
        Ext.getCmp('gridReporteCondicionLinea').recordActivo = record;
        console.log(record);

        var valorCombo = Ext.getCmp('cbxOpcionSeccion').getRawValue();
        console.log('raw value');
        console.log(valorCombo);

        if(valorCombo.indexOf('SUPLEMENTO') !== -1){
            elf.showElement('btnEliminarCaracteristica');
        }
        else{
            elf.hideElement('btnEliminarCaracteristica');
        }
    },

    onGridReporteCondicionLineaItemDblClick: function(dataview, record, item, index, e, eOpts) {
        Ext.getCmp('formEncabezado').cambiaEstadoLinea();
    },

    onCbxOpcionSeccionChange: function(field, newValue, oldValue, eOpts) {
        elf.refreshGrid('gridReporteCondicionLinea');
    },

    onBtnReporteCondicionCerrarClick: function(button, e, eOpts) {
        elf.refreshGrid('gridReporteCondicion');
        elf.closeWindow('winReporteCondicion');
    }

});