/*
 * File: app/view/formAplicacion.js
 *
 * This file was generated by Sencha Architect version 4.1.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('hwtProCondicionUnidad.view.formAplicacion', {
    extend: 'Ext.form.Panel',
    alias: 'widget.formAplicacion',

    requires: [
        'hwtProCondicionUnidad.view.formAplicacionViewModel',
        'Ext.button.Button',
        'Ext.toolbar.Separator',
        'Ext.toolbar.Fill',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.toolbar.Paging',
        'Ext.grid.column.Column'
    ],

    viewModel: {
        type: 'formaplicacion'
    },
    id: 'formAplicacion',
    itemId: 'formAplicacion',
    bodyCls: 'formBackground',
    bodyPadding: 10,
    defaultListenerScope: true,

    dockedItems: [
        {
            xtype: 'toolbar',
            cls: 'toolbarBackground',
            dock: 'top',
            id: 'toolbarPrincipal',
            itemId: 'toolbarPrincipal',
            items: [
                {
                    xtype: 'button',
                    id: 'btnVisualizar',
                    itemId: 'btnVisualizar',
                    width: 130,
                    iconCls: 'fa fa-eye icon16 iconColorDarkBlue',
                    text: 'Visualizar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickVisualizar'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnBuscar',
                    itemId: 'btnBuscar',
                    width: 130,
                    iconCls: 'fa fa-search icon16 iconColorDarkBlue',
                    text: 'Buscar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickBuscar'
                    }
                },
                {
                    xtype: 'tbseparator',
                    width: 50
                },
                {
                    xtype: 'button',
                    id: 'btnCrear',
                    itemId: 'btnCrear',
                    width: 130,
                    iconCls: 'fa fa-plus-square icon16 iconColorGreen',
                    text: 'Crear',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickCrear'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnActualizar',
                    itemId: 'btnActualizar',
                    width: 130,
                    iconCls: 'fa fa-pencil-square icon16 iconColorGreen',
                    text: 'Actualizar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickActualizar'
                    }
                },
                {
                    xtype: 'tbseparator',
                    width: 50
                },
                {
                    xtype: 'button',
                    id: 'btnEliminar',
                    itemId: 'btnEliminar',
                    width: 130,
                    iconCls: 'fa fa-trash icon16 iconColorDarkRed',
                    text: 'Eliminar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickEliminar'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnReporte',
                    itemId: 'btnReporte',
                    width: 130,
                    iconCls: 'fa fa-th  icon16 iconColorDarkBlue',
                    text: 'Reporte',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickReporte'
                    }
                },
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    id: 'btnSalir',
                    itemId: 'btnSalir',
                    width: 130,
                    iconCls: 'fa fa-external-link-square  icon16 iconColorRed',
                    text: 'Salir',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickSalir'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'gridpanel',
            id: 'gridReporteCondicion',
            itemId: 'gridReporteCondicion',
            title: 'Reportes de Condici√≥n',
            store: 'storeReporteCondicion',
            dockedItems: [
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    width: 360,
                    displayInfo: true,
                    store: 'storeReporteCondicion'
                }
            ],
            columns: [
                {
                    xtype: 'gridcolumn',
                    id: 'num_reporte',
                    itemId: 'num_reporte',
                    dataIndex: 'num_reporte',
                    text: 'Numero</br>Reporte'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'vin',
                    itemId: 'vin',
                    width: 150,
                    dataIndex: 'vin',
                    text: 'Vin'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'fecha_reporte',
                    itemId: 'fecha_reporte',
                    dataIndex: 'fecha_reporte',
                    text: 'Fecha</br>Reporte'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'num_reparaciones',
                    itemId: 'num_reparaciones',
                    dataIndex: 'num_reparaciones',
                    text: 'Numero</br>Reparaciones'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var valorRetorno = Ext.util.Format.number(value, '0,000.00');
                        return valorRetorno;
                    },
                    id: 'precio_total_estimado',
                    itemId: 'precio_total_estimado',
                    align: 'right',
                    dataIndex: 'precio_total_estimado',
                    text: 'Precio Total</br>Estimado'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'usuario',
                    itemId: 'usuario',
                    dataIndex: 'usuario',
                    text: 'Usuario'
                }
            ],
            listeners: {
                itemclick: 'onGridReporteCondicionItemClick',
                itemdblclick: 'onGridReporteCondicionItemDblClick'
            }
        }
    ],

    onButtonClickVisualizar: function(button, e, eOpts) {

    },

    onButtonClickBuscar: function(button, e, eOpts) {

    },

    onButtonClickCrear: function(button, e, eOpts) {
        elf.openWindow('winReporteCondicion');
        var arrayCombos = new Array();
        arrayCombos.push('OpcionSeccion');
        arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaComboComplejo);
        console.warn(elf.getSessionData('user_id'));
        elf.writeElement('tfUsuario',elf.getSessionData('user_id'));

    },

    onButtonClickActualizar: function(button, e, eOpts) {

    },

    onButtonClickEliminar: function(button, e, eOpts) {
        Ext.getCmp('formAplicacion').eliminaCondicionUnidad();
    },

    onButtonClickReporte: function(button, e, eOpts) {
        Ext.getCmp('formAplicacion').reporteCondicionUnidad();
    },

    onButtonClickSalir: function(button, e, eOpts) {
        elf.stopApp('hwtProCondicionUnidad');
    },

    onGridReporteCondicionItemClick: function(dataview, record, item, index, e, eOpts) {
        Ext.getCmp('gridReporteCondicion').recordActivo = record.data;
    },

    onGridReporteCondicionItemDblClick: function(dataview, record, item, index, e, eOpts) {
        Ext.getCmp('formAplicacion').presentaRegistro();
    },

    extraeOpcionesCondicion: function() {
        var apiController = 'apiCondicionUnidad';
        var apiMethod     = 'datosOpcionesCondicion';
        var objJsonData = new Object();
        objJsonData.codigoUnidad    = Ext.getCmp('formAplicacion').codigoUnidad;

        var objJsonRequest = new Object();
        objJsonRequest.apiController = apiController;
        objJsonRequest.apiMethod     = apiMethod;
        objJsonRequest.apiData       = JSON.stringify(objJsonData);

        var functionSuccess = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);

            /*Ext.getCmp('formAplicacion').filtrosDefecto();*/

            elf.refreshGrid('gridReporteCondicion');
        };

        var functionFailure = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);
            console.warn('datosOpcionesCondicion:');
            console.warn(jsonData);
        };

        elf.doDataBridge(objJsonRequest,
                         functionSuccess,
                         null,
                         functionFailure,
                         null);
    },

    extraeOpcionesUnidad: function() {
        var apiController = 'apiUnidadUsada';
        var apiMethod     = 'datosOpciones';
        var objJsonData = new Object();
        objJsonData.codigoUnidad    = Ext.getCmp('formAplicacion').codigoUnidad;

        var objJsonRequest = new Object();
        objJsonRequest.apiController = apiController;
        objJsonRequest.apiMethod     = apiMethod;
        objJsonRequest.apiData       = JSON.stringify(objJsonData);

        var functionSuccess = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);

            Ext.getCmp('formAplicacion').filtrosDefecto();
            elf.refreshGrid('gridUnidadUsada');

        };

        var functionFailure = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);
            console.warn('datosOpciones:');
            console.warn(jsonData);
        };

        elf.doDataBridge(objJsonRequest,
                         functionSuccess,
                         null,
                         functionFailure,
                         null);

    },

    cargaCombo: function(element, index, array) {
        var jsonData = elf.getInfoDataBridge('datosOpciones');
        var idCombo    = 'cbx' + element;
        var listaCombo = 'opciones' + element;

        if(Ext.getCmp(idCombo) !== undefined){
            elf.setComboBox(idCombo,
                            jsonData,
                            listaCombo,
                            'descripcion',
                            'descripcion');
        }
        else{
            console.warn('cargaOpciones: - No se encontro el ComboBox: ' + idCombo);
        }
    },

    cargaComboComplejo: function(element, index, array) {
        var jsonData = elf.getInfoDataBridge('datosOpcionesCondicion');
        var idCombo    = 'cbx' + element;
        var listaCombo = 'opciones' + element;

        console.info(jsonData);

        if(Ext.getCmp(idCombo) !== undefined){
            elf.setComboBox(idCombo,
                            jsonData,
                            listaCombo,
                            'codigo',
                            'descripcion');
        }
        else{
            console.warn('cargaOpciones: - No se encontro el ComboBox: ' + idCombo);
        }
    },

    presentaRegistro: function(pEstado) {
        var reporteCondicion = Ext.getCmp('gridReporteCondicion').recordActivo;

        console.warn(reporteCondicion);

        var apiController = 'apiCondicionUnidad';
        var apiMethod     = 'datosReporteCondicion';
        var objJsonData   = new Object();
        objJsonData.numReporte = reporteCondicion.num_reporte;

        var objJsonRequest           = new Object();
        objJsonRequest.apiController = apiController;
        objJsonRequest.apiMethod     = apiMethod;
        objJsonRequest.apiData       = JSON.stringify(objJsonData);

        var functionSuccess = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);

            var pModo = '';
            if(pEstado === 'editar'){
                pModo = 'edit';
            }

            elf.openWindow('winReporteCondicion');
            var arrayCombos = new Array();
            arrayCombos.push('OpcionSeccion');
            arrayCombos.forEach(Ext.getCmp('formAplicacion').cargaComboComplejo);

            var jsonData = elf.getInfoDataBridge('datosReporteCondicion');
            elf.showRecord(jsonData,'hwtReporteCondicion',pModo);
            elf.refreshGrid('gridReporteCondicionLinea');

            var obj = Ext.getCmp('tfPrecioTotalEstimado');
            console.warn('tfPrecioTotalEstimado');
            console.warn(obj);
        };

        var functionFailure = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);
            elf.showInfo(jsonData,
                         'error');
        };

        elf.doDataBridge(objJsonRequest,
                         functionSuccess,
                         null,
                         functionFailure,
                         null);
    },

    eliminaCondicionUnidad: function() {
        var recordReporteCondicion = Ext.getCmp('gridReporteCondicion').recordActivo;

        if(recordReporteCondicion === undefined){
            msgTipo      = 'error';
            msgTitulo    = 'Eliminar Condiciones de la Unidad (Registro)';
            msgContenido = 'Debe seleccionar un registro v√°lido para realizar √©sta operaci√≥n';
            elf.message(msgTipo,msgTitulo,msgContenido);
            return;
        }

        var msgFuncion = function(){
            var recordReporteCondicion = Ext.getCmp('gridReporteCondicion').recordActivo;

            var apiController = 'apiCondicionUnidad';
            var apiMethod     = 'eliminaCondicionUnidad';
            var objJsonData   = new Object();
            objJsonData.rowidCondicionUnidad    = recordReporteCondicion.rowid;

            var objJsonRequest = new Object();
            objJsonRequest.apiController = apiController;
            objJsonRequest.apiMethod     = apiMethod;
            objJsonRequest.apiData       = JSON.stringify(objJsonData);

            var functionSuccess = function(){
                var jsonData = elf.getInfoDataBridge('eliminaCondicionUnidad');
                elf.showInfo(jsonData,'information');
                elf.refreshGrid('gridReporteCondicion');
            };

            var functionFailure = function(){
                var jsonData = elf.getInfoDataBridge('eliminaCondicionUnidad');

                elf.showInfo(jsonData,'error');
            };


            elf.doDataBridge(objJsonRequest,
                             functionSuccess,
                             null,
                             functionFailure,
                             null);

        };

        console.warn('recordReporteCondicion');
        console.warn(recordReporteCondicion);

        msgTipo      = 'question';
        msgTitulo    = 'Eliminar Condiciones de la Unidad (Registro)';
        msgContenido = 'Desea eliminar el registro de Condici√≥nes de la Unidad: ' + recordReporteCondicion.vin + '?';

        elf.message(msgTipo,msgTitulo,msgContenido,msgFuncion);


    },

    reporteCondicionUnidad: function() {
        var recordReporteCondicion = Ext.getCmp('gridReporteCondicion').recordActivo;

        if(recordReporteCondicion === undefined){
            msgTipo      = 'error';
            msgTitulo    = 'Reporte de Condiciones de la Unidad (Registro)';
            msgContenido = 'Debe seleccionar un registro v√°lido para realizar √©sta operaci√≥n';
            elf.message(msgTipo,msgTitulo,msgContenido);
            return;
        }

        var apiController = 'apiCondicionUnidad';
        var apiMethod     = 'reporteCondicionUnidad';
        var objJsonData   = new Object();
        objJsonData.rowidCondicionUnidad = recordReporteCondicion.rowid;
        objJsonData.vinUnidad            = recordReporteCondicion.vin;
        objJsonData.numReporte           = recordReporteCondicion.num_reporte;

        var objJsonRequest = new Object();
        objJsonRequest.apiController = apiController;
        objJsonRequest.apiMethod     = apiMethod;
        objJsonRequest.apiData       = JSON.stringify(objJsonData);

        var functionSuccess = function(){
            var jsonData = elf.getInfoDataBridge('reporteCondicionUnidad');
            var archivoGenerado = elf.getGeneratedFile(jsonData.archivoGenerado.nombre);
            window.open(archivoGenerado);
        };

        var functionFailure = function(){
            var jsonData = elf.getInfoDataBridge('reporteCondicionUnidad');

            elf.showInfo(jsonData,'error');
        };


        elf.doDataBridge(objJsonRequest,
                         functionSuccess,
                         null,
                         functionFailure,
                         null);

    }

});