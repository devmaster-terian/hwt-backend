/*
 * File: app/view/formAplicacion.js
 *
 * This file was generated by Sencha Architect version 4.1.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('hwtProCotizacion.view.formAplicacion', {
    extend: 'Ext.form.Panel',
    alias: 'widget.formAplicacion',

    requires: [
        'hwtProCotizacion.view.formAplicacionViewModel',
        'Ext.button.Button',
        'Ext.toolbar.Separator',
        'Ext.toolbar.Fill',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.toolbar.Paging',
        'Ext.grid.column.Column'
    ],

    viewModel: {
        type: 'formaplicacion'
    },
    id: 'formAplicacion',
    itemId: 'formAplicacion',
    bodyCls: 'formBackground',
    bodyPadding: 10,
    defaultListenerScope: true,

    dockedItems: [
        {
            xtype: 'toolbar',
            cls: 'toolbarBackground',
            dock: 'top',
            id: 'toolbarPrincipal',
            itemId: 'toolbarPrincipal',
            items: [
                {
                    xtype: 'button',
                    id: 'btnVisualizar',
                    itemId: 'btnVisualizar',
                    width: 130,
                    iconCls: 'fa fa-eye icon16 iconColorDarkBlue',
                    text: 'Visualizar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickVisualizar'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnBuscar',
                    itemId: 'btnBuscar',
                    width: 130,
                    iconCls: 'fa fa-search icon16 iconColorDarkBlue',
                    text: 'Buscar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickBuscar'
                    }
                },
                {
                    xtype: 'tbseparator',
                    width: 50
                },
                {
                    xtype: 'button',
                    id: 'btnCrear',
                    itemId: 'btnCrear',
                    width: 130,
                    iconCls: 'fa fa-plus-square icon16 iconColorGreen',
                    text: 'Crear',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickCrear'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnActualizar',
                    itemId: 'btnActualizar',
                    width: 130,
                    iconCls: 'fa fa-pencil-square icon16 iconColorGreen',
                    text: 'Actualizar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickActualizar'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnEliminar',
                    itemId: 'btnEliminar',
                    width: 130,
                    iconCls: 'fa fa-trash icon16 iconColorDarkRed',
                    text: 'Eliminar',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickEliminar'
                    }
                },
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    id: 'btnReporte',
                    itemId: 'btnReporte',
                    width: 130,
                    iconCls: 'fa fa-th  icon16 iconColorDarkBlue',
                    text: 'Reporte',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickReporte'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnSalir',
                    itemId: 'btnSalir',
                    width: 130,
                    iconCls: 'fa fa-external-link-square  icon16 iconColorRed',
                    text: 'Salir',
                    textAlign: 'left',
                    listeners: {
                        click: 'onButtonClickSalir'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'gridpanel',
            reference: 'gridCotizacion',
            id: 'gridCotizacion',
            itemId: 'gridCotizacion',
            title: 'Cotizaciones',
            store: 'storeCotizacion',
            viewConfig: {
                id: 'viewTableCotizacion',
                itemId: 'viewTableCotizacion'
            },
            dockedItems: [
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    id: 'pagingToolbarCotizacion',
                    itemId: 'pagingToolbarCotizacion',
                    width: 360,
                    displayInfo: true,
                    store: 'storeCotizacion'
                }
            ],
            columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'num_cotizacion',
                    text: 'Numero</br> Cotizacion'
                },
                {
                    xtype: 'gridcolumn',
                    width: 110,
                    dataIndex: 'estado',
                    text: 'Estado'
                },
                {
                    xtype: 'gridcolumn',
                    width: 110,
                    dataIndex: 'fecha_cotizacion',
                    text: 'Fecha</br>Cotizacion'
                },
                {
                    xtype: 'gridcolumn',
                    width: 100,
                    dataIndex: 'codigo_cliente',
                    text: 'Codigo</br>Cliente'
                },
                {
                    xtype: 'gridcolumn',
                    width: 250,
                    dataIndex: 'nombre_cliente',
                    text: 'Nombre</br>Cliente'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var valorRetorno = Ext.util.Format.number(value, '0,000.00');
                        return valorRetorno;
                    },
                    align: 'right',
                    dataIndex: 'valor_total',
                    text: 'Valor Total'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'usuario',
                    text: 'Usuario'
                },
                {
                    xtype: 'gridcolumn',
                    width: 250,
                    dataIndex: 'nombre_usuario',
                    text: 'Nombre</br>Usuario'
                }
            ],
            listeners: {
                itemclick: 'onGridCotizacionItemClick',
                itemdblclick: 'onGridCotizacionItemDblClick'
            }
        }
    ],

    onButtonClickVisualizar: function(button, e, eOpts) {

    },

    onButtonClickBuscar: function(button, e, eOpts) {

    },

    onButtonClickCrear: function(button, e, eOpts) {
        elf.openWindow('winCotizacionUnidad');

        var fechaActual = new Date();
        elf.writeElement('tfFechaCotizacion',fechaActual);
        elf.writeElement('tfUsuario',elf.getSessionData('user_id'));

        elf.enableElement('tfCodigoCliente');
        elf.enableElement('btnZoomBuscaCliente');
        elf.enableElement('tfFechaCotizacion');

        elf.refreshGrid('gridCotizacionUnidad');

    },

    onButtonClickActualizar: function(button, e, eOpts) {

    },

    onButtonClickEliminar: function(button, e, eOpts) {



        var recordCotizacion = Ext.getCmp('gridCotizacion').recordActivo;
        if(recordCotizacion === undefined){
            msgTipo      = 'error';
            msgTitulo    = 'Eliminar Cotización';
            msgContenido = 'Debe seleccionar un registro válido para realizar ésta operación';
            elf.message(msgTipo,msgTitulo,msgContenido);
            return;
        }

        console.warn(recordCotizacion);

        var msgFuncion = function(){
            var recordCotizacion = Ext.getCmp('gridCotizacion').recordActivo;
            var apiController = 'apiCotizacion';
            var apiMethod     = 'eliminarCotizacion';
            var objJsonData   = new Object();
            objJsonData.rowidCotizacion = recordCotizacion.rowid;
            objJsonData.numCotizacion         = recordCotizacion.num_cotizacion;

            var objJsonRequest = new Object();
            objJsonRequest.apiController = apiController;
            objJsonRequest.apiMethod     = apiMethod;
            objJsonRequest.apiData       = JSON.stringify(objJsonData);

            var functionSuccess = function(){
                var jsonData = elf.getInfoDataBridge('eliminarCotizacion');
                console.log(jsonData);

                elf.refreshGrid('gridCotizacion');
            };

            var functionFailure = function(){
                var jsonData = elf.getInfoDataBridge('eliminarCotizacion');
                console.warn(jsonData);

                elf.showInfo(jsonData,'error');
            };


            elf.doDataBridge(objJsonRequest,
                             functionSuccess,
                             null,
                             functionFailure,
                             null);
        }; //msgFuncion


        msgTipo      = 'question';
        msgTitulo    = 'Eliminar la Cotizacion ' + recordCotizacion.num_cotizacion;
        msgContenido = 'Desea eliminar la Cotización No. ' + recordCotizacion.num_cotizacion + '?';

        elf.message(msgTipo,msgTitulo,msgContenido,msgFuncion);


    },

    onButtonClickReporte: function(button, e, eOpts) {

    },

    onButtonClickSalir: function(button, e, eOpts) {
        elf.stopApp('hwtProCotizacion');
    },

    onGridCotizacionItemClick: function(dataview, record, item, index, e, eOpts) {
        Ext.getCmp('gridCotizacion').recordActivo = record.data;
    },

    onGridCotizacionItemDblClick: function(dataview, record, item, index, e, eOpts) {
        Ext.getCmp('formAplicacion').presentaRegistro();
    },

    extraeOpcionesUnidad: function() {
        var apiController = 'apiUnidadUsada';
        var apiMethod     = 'datosOpciones';
        var objJsonData = new Object();
        objJsonData.codigoUnidad    = Ext.getCmp('formAplicacion').codigoUnidad;

        var objJsonRequest = new Object();
        objJsonRequest.apiController = apiController;
        objJsonRequest.apiMethod     = apiMethod;
        objJsonRequest.apiData       = JSON.stringify(objJsonData);

        var functionSuccess = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);
            elf.refreshGrid('gridUnidadUsada');
        };

        var functionFailure = function(){
            var jsonData = elf.getInfoDataBridge(apiMethod);
        };

        elf.doDataBridge(objJsonRequest,
                         functionSuccess,
                         null,
                         functionFailure,
                         null);

    },

    presentaRegistro: function() {
        var recordCotizacion = Ext.getCmp('gridCotizacion').recordActivo;

        if(recordCotizacion === undefined){
            msgTipo      = 'error';
            msgTitulo    = 'Cotizacion de Unidades (Registro)';
            msgContenido = 'Debe seleccionar un registro válido para realizar ésta operación';
            elf.message(msgTipo,msgTitulo,msgContenido);
            return;
        }

        var apiController = 'apiCotizacion';
        var apiMethod     = 'datosCotizacion';
        var objJsonData   = new Object();
        objJsonData.rowidCotizacion = recordCotizacion.rowid;
        objJsonData.numCotizacion   = recordCotizacion.num_cotizacion;

        var objJsonRequest = new Object();
        objJsonRequest.apiController = apiController;
        objJsonRequest.apiMethod     = apiMethod;
        objJsonRequest.apiData       = JSON.stringify(objJsonData);

        var functionSuccess = function(){
            var jsonData = elf.getInfoDataBridge('datosCotizacion');
            console.log(jsonData);


            var valor_subtotal = jsonData.hwtCotizacion.valor_subtotal;
            var valor_impuesto = jsonData.hwtCotizacion.valor_impuesto;
            var valor_total    = jsonData.hwtCotizacion.valor_total;

            elf.openWindow('winCotizacionUnidad');
            elf.writeElement('tfCodigoCliente'   ,jsonData.hwtCotizacion.codigo_cliente);
            elf.writeElement('tfNombreCliente'   ,jsonData.hwtCotizacion.nombre_cliente);
            elf.writeElement('tfFechaCotizacion' ,jsonData.hwtCotizacion.fecha_cotizacion);
            elf.writeElement('tfNoCotizacion'    ,jsonData.hwtCotizacion.num_cotizacion);
            elf.writeElement('tfUsuario'         ,jsonData.hwtCotizacion.usuario);
            elf.writeElement('tfValSubtotal'     ,Ext.util.Format.number(valor_subtotal , '0,000.00'));
            elf.writeElement('tfValImpuestos'    ,Ext.util.Format.number(valor_impuesto , '0,000.00'));
            elf.writeElement('tfValTotal'        ,Ext.util.Format.number(valor_total    , '0,000.00'));

            elf.hideElement('btnIniciarCotizacion');
            elf.refreshGrid('gridCotizacionUnidad');
        };

        var functionFailure = function(){
            var jsonData = elf.getInfoDataBridge('datosCotizacion');
            console.warn(jsonData);

            elf.showInfo(jsonData,'error');
        };


        elf.doDataBridge(objJsonRequest,
                         functionSuccess,
                         null,
                         functionFailure,
                         null);


    }

});